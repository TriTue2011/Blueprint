{"createdAt":"2025-08-03T13:06:59.764Z","updatedAt":"2025-08-28T17:07:49.759Z","id":"iCtDSe7X2aEUr8nc","name":"tra cuu","active":false,"isArchived":true,"nodes":[{"parameters":{"jsCode":"// Kiểm tra dữ liệu đầu vào\nconst inputData = items[0];\nlet htmlContent = \"\";\n\n// Kiểm tra cấu trúc của dữ liệu đầu vào\nif (inputData && typeof inputData === 'object') {\n  // Nếu dữ liệu là một đối tượng, thử lấy thuộc tính 'data'\n  if (inputData.data) {\n    htmlContent = inputData.data;\n  } else if (inputData.json && inputData.json.data) {\n    // Thử lấy từ json.data nếu có\n    htmlContent = inputData.json.data;\n  } else {\n    // Thử tìm bất kỳ thuộc tính nào chứa chuỗi HTML\n    for (const key in inputData) {\n      if (typeof inputData[key] === 'string' && \n          (inputData[key].includes('<div') || inputData[key].includes('<table'))) {\n        htmlContent = inputData[key];\n        break;\n      }\n    }\n  }\n} else if (typeof inputData === 'string') {\n  // Nếu dữ liệu là một chuỗi, sử dụng trực tiếp\n  htmlContent = inputData;\n}\n\n// Xử lý HTML nếu có\nconst result = [];\nlet updateTime = \"\";\nlet dataSource = \"\";\n\nif (htmlContent && htmlContent.length > 0) {\n  try {\n    // Tìm tất cả các bảng trong HTML\n    const tableRegex = /<table[^>]*>[\\s\\S]*?<tbody>[\\s\\S]*?<\\/tbody>[\\s\\S]*?<\\/table>/g;\n    let tableMatch;\n    \n    while ((tableMatch = tableRegex.exec(htmlContent)) !== null) {\n      const tableContent = tableMatch[0];\n      const violation = {};\n      \n      // Tìm tất cả các hàng trong bảng\n      const rowRegex = /<tr>[\\s\\S]*?<td>(.*?)<\\/td>[\\s\\S]*?<td>([\\s\\S]*?)<\\/td>[\\s\\S]*?<\\/tr>/g;\n      let rowMatch;\n      \n      while ((rowMatch = rowRegex.exec(tableContent)) !== null) {\n        if (rowMatch.length >= 3) {\n          const key = rowMatch[1].replace(':', '').trim();\n          let value = rowMatch[2].trim();\n          \n          // Loại bỏ HTML tags từ giá trị\n          value = value.replace(/<button.*?<\\/button>/g, '');\n          value = value.replace(/<[^>]*>/g, ' ').replace(/\\s+/g, ' ').trim();\n          \n          // Chuyển đổi key thành camelCase\n          const camelKey = key\n            .normalize('NFD')\n            .replace(/[\\u0300-\\u036f]/g, '')\n            .replace(/đ/g, 'd')\n            .replace(/Đ/g, 'D')\n            .replace(/\\s+(.)/g, (match, group) => group.toUpperCase())\n            .replace(/\\s/g, '')\n            .replace(/^(.)/, (match, group) => group.toLowerCase());\n          \n          violation[camelKey] = value;\n        }\n      }\n      \n      // Chỉ thêm vi phạm nếu có ít nhất một trường dữ liệu\n      if (Object.keys(violation).length > 0) {\n        result.push(violation);\n      }\n    }\n    \n    // Trích xuất thời gian cập nhật\n    const updateTimeMatch = htmlContent.match(/Dữ liệu được cập nhật vào lúc: ([\\d:, -]+)/);\n    if (updateTimeMatch && updateTimeMatch[1]) {\n      updateTime = updateTimeMatch[1].trim();\n    }\n    \n    // Trích xuất nguồn dữ liệu\n    const sourceMatch = htmlContent.match(/Nguồn: <span[^>]*>(.*?)<\\/span>/);\n    if (sourceMatch && sourceMatch[1]) {\n      dataSource = sourceMatch[1].trim();\n    }\n    \n  } catch (error) {\n    return {\n      json: {\n        error: true,\n        message: `Lỗi khi xử lý dữ liệu: ${error.message}`\n      }\n    };\n  }\n}\n\n// Trả về kết quả\nreturn {\n  json: {\n    violations: result,\n    totalViolations: result.length,\n    licensePlate: result.length > 0 ? result[0].bienKiemSoat : '',\n    vehicleType: result.length > 0 ? result[0].loaiPhuongTien : '',\n    metadata: {\n      updateTime: updateTime,\n      dataSource: dataSource\n    }\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[608,-144],"id":"d87e8006-556f-4368-9c47-8053750aeb12","name":"Code","onError":"continueRegularOutput"},{"parameters":{"workflowInputs":{"values":[{"name":"loaixe","type":"number"},{"name":"bienso","type":"any"},{"name":"khuvuc","type":"any"},{"name":"date","type":"any"},{"name":"temdk","type":"any"},{"name":"chitiet","type":"any"},{"name":"provinces","type":"any"},{"name":"districts","type":"any"},{"name":"video","type":"any"},{"name":"type","type":"any"},{"name":"vannien","type":"any"}]}},"id":"312b68eb-c819-4ae3-83aa-5349911a7bba","typeVersion":1.1,"name":"Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[-912,304]},{"parameters":{"jsCode":"// Kiểm tra cấu trúc dữ liệu đầu vào\nlet htmlContent = \"\";\n\n// Kiểm tra xem items có tồn tại không\nif (!items || !Array.isArray(items) || items.length === 0) {\n  return {\n    json: {\n      error: true,\n      message: \"Dữ liệu đầu vào không hợp lệ hoặc rỗng\"\n    }\n  };\n}\n\n// Kiểm tra cấu trúc của items[0]\nconst inputData = items[0];\nif (typeof inputData === 'object') {\n  // Thử lấy dữ liệu từ các thuộc tính phổ biến\n  if (inputData.data) {\n    htmlContent = inputData.data;\n  } else if (inputData.json && inputData.json.data) {\n    htmlContent = inputData.json.data;\n  } else if (inputData.body) {\n    htmlContent = inputData.body;\n  } else if (inputData.content) {\n    htmlContent = inputData.content;\n  } else if (inputData.html) {\n    htmlContent = inputData.html;\n  }\n} else if (typeof inputData === 'string') {\n  htmlContent = inputData;\n}\n\n// Kiểm tra xem chúng ta đã có HTML chưa\nif (!htmlContent) {\n  return {\n    json: {\n      error: true,\n      message: \"Không thể tìm thấy dữ liệu HTML\"\n    }\n  };\n}\n\nconst result = {};\n\ntry {\n  // Trích xuất giải đặc biệt (G.ĐB)\n  const gdbMatch = htmlContent.match(/<td>G\\.ĐB<\\/td>\\s*<td[^>]*>\\s*<span[^>]*>([^<]+)<\\/span>/);\n  result.giai_db = gdbMatch ? gdbMatch[1].trim() : null;\n\n  // Trích xuất giải nhất (G.1)\n  const g1Match = htmlContent.match(/<td>G\\.1<\\/td>\\s*<td[^>]*>\\s*<span[^>]*>([^<]+)<\\/span>/);\n  result.giai_nhat = g1Match ? g1Match[1].trim() : null;\n\n  // Trích xuất giải nhì (G.2)\n  const g2Match = htmlContent.match(/<td>G\\.2<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g2Match) {\n    const g2Numbers = g2Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g2Numbers) {\n      result.giai_nhi = g2Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất giải ba (G.3)\n  const g3Match = htmlContent.match(/<td>G\\.3<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g3Match) {\n    const g3Numbers = g3Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g3Numbers) {\n      result.giai_ba = g3Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất giải tư (G.4)\n  const g4Match = htmlContent.match(/<td>G\\.4<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g4Match) {\n    const g4Numbers = g4Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g4Numbers) {\n      result.giai_tu = g4Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất giải năm (G.5)\n  const g5Match = htmlContent.match(/<td>G\\.5<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g5Match) {\n    const g5Numbers = g5Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g5Numbers) {\n      result.giai_nam = g5Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất giải sáu (G.6)\n  const g6Match = htmlContent.match(/<td>G\\.6<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g6Match) {\n    const g6Numbers = g6Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g6Numbers) {\n      result.giai_sau = g6Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất giải bảy (G.7)\n  const g7Match = htmlContent.match(/<td>G\\.7<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g7Match) {\n    const g7Numbers = g7Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g7Numbers) {\n      result.giai_bay = g7Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất bảng loto\n  const lotoMatch = htmlContent.match(/<span class=\"link-pad-left padding10\">Loto miền Bắc<\\/span>[\\s\\S]*?<table[^>]*>([\\s\\S]*?)<\\/table>/);\n  if (lotoMatch) {\n    const lotoRows = lotoMatch[1].match(/<tr>\\s*<td[^>]*>(\\d+)<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>\\s*<\\/tr>/g);\n    if (lotoRows) {\n      result.loto = {};\n      lotoRows.forEach(row => {\n        const match = row.match(/<tr>\\s*<td[^>]*>(\\d+)<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>\\s*<\\/tr>/);\n        if (match) {\n          const head = match[1];\n          const content = match[2].replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n          result.loto[head] = content;\n        }\n      });\n    }\n  }\n\n} catch (error) {\n  return {\n    json: {\n      error: true,\n      message: `Lỗi khi xử lý dữ liệu: ${error.message}`\n    }\n  };\n}\n\n// Trả về kết quả\nreturn {\n  json: {\n    success: true,\n    data: result\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[944,128],"id":"f2a9630b-0dfc-40f7-83e4-39610e307cf9","name":"Code1","onError":"continueRegularOutput"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Start').item.json.khuvuc }}","rightValue":"xsmb","operator":{"type":"string","operation":"equals"},"id":"afc68c52-279c-48f3-a8ec-f838b1299bc1"}],"combinator":"and"},"renameOutput":true,"outputKey":"xsmb"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"858fe1e9-7df3-40e6-b16b-3d59e8bbb9d0","leftValue":"={{ $('Start').item.json.khuvuc }}","rightValue":"xsmn","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"xsmn"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"188bde00-8f42-4570-9197-a683cd5d7782","leftValue":"={{ $('Start').item.json.khuvuc }}","rightValue":"xsmt","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"xsmt"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[560,240],"id":"58d1905d-9f72-4ad9-9a9a-2e7f13d4fc4f","name":"Switch","onError":"continueRegularOutput"},{"parameters":{"jsCode":"// --- CÁC HÀM HỖ TRỢ ---\n// Hàm để dọn dẹp văn bản lấy từ HTML (xóa thẻ HTML, khoảng trắng thừa)\nfunction cleanText(text) {\n    if (!text) return '';\n    return text.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n}\n\n// --- LOGIC CHÍNH ---\n\n// Lấy dữ liệu JSON từ item đầu tiên n8n đưa vào\nconst inputJson = items[0].json;\n\n// Lấy chuỗi HTML. Dữ liệu có thể là một object { \"data\": \"...\" }\n// hoặc một mảng chứa object đó [{ \"data\": \"...\" }]. Code này xử lý cả hai.\nlet html = '';\nif (Array.isArray(inputJson) && inputJson[0] && inputJson[0].data) {\n  // Trường hợp là mảng\n  html = inputJson[0].data;\n} else if (inputJson && inputJson.data) {\n  // Trường hợp là object\n  html = inputJson.data;\n}\n\n// Nếu không tìm thấy HTML thì báo lỗi\nif (!html) {\n  throw new Error(\"Không tìm thấy chuỗi HTML trong `items[0].json.data`. Vui lòng kiểm tra cấu trúc dữ liệu từ node phía trước.\");\n}\n\n\n// --- 1. TRÍCH XUẤT BẢNG KẾT QUẢ XỔ SỐ CHÍNH ---\n\nconst ketQuaXoSo = {};\n\n// Tìm bảng kết quả chính bằng regex\nconst prizeTableRegex = /<table class=\"table table-bordered table-striped table-xsmn livetn3\">([\\s\\S]*?)<\\/table>/;\nconst prizeTableMatch = html.match(prizeTableRegex);\n\nif (prizeTableMatch) {\n    const tableHtml = prizeTableMatch[1];\n\n    // Lấy tên các tỉnh từ thead\n    const theadRegex = /<thead>([\\s\\S]*?)<\\/thead>/;\n    const theadMatch = tableHtml.match(theadRegex);\n    const provinces = [];\n    if (theadMatch) {\n        const provinceHeaderRegex = /<th[^>]*>([\\s\\S]*?)<\\/th>/g;\n        let provinceMatch;\n        // Bỏ qua thẻ <th> đầu tiên (chữ \"Giải\")\n        provinceHeaderRegex.exec(theadMatch[1]); \n        while ((provinceMatch = provinceHeaderRegex.exec(theadMatch[1])) !== null) {\n            const provinceName = cleanText(provinceMatch[1]);\n            provinces.push(provinceName);\n            ketQuaXoSo[provinceName] = {};\n        }\n    }\n\n    // Lấy các giải thưởng từ tbody\n    const tbodyRegex = /<tbody>([\\s\\S]*?)<\\/tbody>/;\n    const tbodyMatch = tableHtml.match(tbodyRegex);\n    if (tbodyMatch) {\n        const rowRegex = /<tr>([\\s\\S]*?)<\\/tr>/g;\n        let rowMatch;\n        while ((rowMatch = rowRegex.exec(tbodyMatch[1])) !== null) {\n            const cellRegex = /<td[^>]*>([\\s\\S]*?)<\\/td>/g;\n            let cellMatch;\n            \n            // Ô đầu tiên là tên giải\n            cellMatch = cellRegex.exec(rowMatch[1]);\n            if (!cellMatch) continue;\n            const prizeName = cleanText(cellMatch[1]);\n\n            // Các ô tiếp theo là kết quả\n            let provinceIndex = 0;\n            while ((cellMatch = cellRegex.exec(rowMatch[1])) !== null) {\n                if (provinceIndex < provinces.length) {\n                    const provinceName = provinces[provinceIndex];\n                    const numbersRaw = cellMatch[1];\n                    const numberSpanRegex = /<span[^>]*>([\\s\\S]*?)<\\/span>/g;\n                    const numbers = [];\n                    let numberMatch;\n                    while((numberMatch = numberSpanRegex.exec(numbersRaw)) !== null) {\n                        numbers.push(...cleanText(numberMatch[1]).split(' '));\n                    }\n                    \n                    ketQuaXoSo[provinceName][prizeName] = numbers.filter(n => n); // Lọc bỏ chuỗi rỗng\n                    provinceIndex++;\n                }\n            }\n        }\n    }\n}\n\n// --- 2. TRÍCH XUẤT CÁC BẢNG LOTO ---\nconst loto = {};\nconst lotoContainerRegex = /<div class=\"block-main-content view-loto\">([\\s\\S]*?)<\\/div>/;\nconst lotoContainerMatch = html.match(lotoContainerRegex);\n\nif (lotoContainerMatch) {\n    // Tách mỗi bảng loto thành một phần riêng\n    const lotoTablesHtml = lotoContainerMatch[1].split('<p class=\"padding10\">').slice(1);\n    \n    for (const tableHtml of lotoTablesHtml) {\n        // Lấy tên tỉnh từ tiêu đề\n        const titleMatch = tableHtml.match(/Loto (.*?) Thứ/);\n        if (titleMatch && titleMatch[1]) {\n            const provinceName = titleMatch[1].trim();\n            loto[provinceName] = {};\n            \n            // Lấy các hàng của bảng loto\n            const lotoRowRegex = /<td class=\"text-center\">(\\d+|-)<\\/td>\\s*<td.*?>([\\s\\S]*?)<\\/td>/g;\n            let rowMatch;\n            while ((rowMatch = lotoRowRegex.exec(tableHtml)) !== null) {\n                const head = rowMatch[1]; // Đầu số (0, 1, 2... hoặc -)\n                if (head === '-') continue;\n\n                const numbersRaw = cleanText(rowMatch[2]); // Dãy số loto\n                \n                const numbers = numbersRaw === '-' ? [] : numbersRaw.replace(/,\\s*$/,'').split(/, | |,/g).filter(n => n);\n                loto[provinceName][head] = numbers;\n            }\n        }\n    }\n}\n\n// --- KẾT QUẢ CUỐI CÙNG ---\nreturn [{\n    json: {\n        ketQuaXoSo,\n        loto\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[944,272],"id":"66fee53e-9f8c-4abf-a6cf-d67b2ee52e30","name":"Code2","onError":"continueRegularOutput"},{"parameters":{"jsCode":"// --- CÁC HÀM HỖ TRỢ ---\n// Hàm để dọn dẹp văn bản lấy từ HTML (xóa thẻ HTML, khoảng trắng thừa)\nfunction cleanText(text) {\n    if (!text) return '';\n    return text.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n}\n\n// --- LOGIC CHÍNH ---\n\n// Lấy dữ liệu JSON từ item đầu tiên n8n đưa vào\nconst inputJson = items[0].json;\n\n// Lấy chuỗi HTML. Dữ liệu có thể là một object { \"data\": \"...\" }\n// hoặc một mảng chứa object đó [{ \"data\": \"...\" }]. Code này xử lý cả hai.\nlet html = '';\nif (Array.isArray(inputJson) && inputJson[0] && inputJson[0].data) {\n  // Trường hợp là mảng\n  html = inputJson[0].data;\n} else if (inputJson && inputJson.data) {\n  // Trường hợp là object\n  html = inputJson.data;\n}\n\n// Nếu không tìm thấy HTML thì báo lỗi\nif (!html) {\n  throw new Error(\"Không tìm thấy chuỗi HTML trong `items[0].json.data`. Vui lòng kiểm tra cấu trúc dữ liệu từ node phía trước.\");\n}\n\n\n// --- 1. TRÍCH XUẤT BẢNG KẾT QUẢ XỔ SỐ CHÍNH ---\n\nconst ketQuaXoSo = {};\n\n// Tìm bảng kết quả chính bằng regex\nconst prizeTableRegex = /<table class=\"table table-bordered table-striped table-xsmn livetn3\">([\\s\\S]*?)<\\/table>/;\nconst prizeTableMatch = html.match(prizeTableRegex);\n\nif (prizeTableMatch) {\n    const tableHtml = prizeTableMatch[1];\n\n    // Lấy tên các tỉnh từ thead\n    const theadRegex = /<thead>([\\s\\S]*?)<\\/thead>/;\n    const theadMatch = tableHtml.match(theadRegex);\n    const provinces = [];\n    if (theadMatch) {\n        const provinceHeaderRegex = /<th[^>]*>([\\s\\S]*?)<\\/th>/g;\n        let provinceMatch;\n        // Bỏ qua thẻ <th> đầu tiên (chữ \"Giải\")\n        provinceHeaderRegex.exec(theadMatch[1]); \n        while ((provinceMatch = provinceHeaderRegex.exec(theadMatch[1])) !== null) {\n            const provinceName = cleanText(provinceMatch[1]);\n            provinces.push(provinceName);\n            ketQuaXoSo[provinceName] = {};\n        }\n    }\n\n    // Lấy các giải thưởng từ tbody\n    const tbodyRegex = /<tbody>([\\s\\S]*?)<\\/tbody>/;\n    const tbodyMatch = tableHtml.match(tbodyRegex);\n    if (tbodyMatch) {\n        const rowRegex = /<tr>([\\s\\S]*?)<\\/tr>/g;\n        let rowMatch;\n        while ((rowMatch = rowRegex.exec(tbodyMatch[1])) !== null) {\n            const cellRegex = /<td[^>]*>([\\s\\S]*?)<\\/td>/g;\n            let cellMatch;\n            \n            // Ô đầu tiên là tên giải\n            cellMatch = cellRegex.exec(rowMatch[1]);\n            if (!cellMatch) continue;\n            const prizeName = cleanText(cellMatch[1]);\n\n            // Các ô tiếp theo là kết quả\n            let provinceIndex = 0;\n            while ((cellMatch = cellRegex.exec(rowMatch[1])) !== null) {\n                if (provinceIndex < provinces.length) {\n                    const provinceName = provinces[provinceIndex];\n                    const numbersRaw = cellMatch[1];\n                    const numberSpanRegex = /<span[^>]*>([\\s\\S]*?)<\\/span>/g;\n                    const numbers = [];\n                    let numberMatch;\n                    while((numberMatch = numberSpanRegex.exec(numbersRaw)) !== null) {\n                        numbers.push(...cleanText(numberMatch[1]).split(' '));\n                    }\n                    \n                    ketQuaXoSo[provinceName][prizeName] = numbers.filter(n => n); // Lọc bỏ chuỗi rỗng\n                    provinceIndex++;\n                }\n            }\n        }\n    }\n}\n\n// --- 2. TRÍCH XUẤT CÁC BẢNG LOTO ---\nconst loto = {};\nconst lotoContainerRegex = /<div class=\"block-main-content view-loto\">([\\s\\S]*?)<\\/div>/;\nconst lotoContainerMatch = html.match(lotoContainerRegex);\n\nif (lotoContainerMatch) {\n    // Tách mỗi bảng loto thành một phần riêng\n    const lotoTablesHtml = lotoContainerMatch[1].split('<p class=\"padding10\">').slice(1);\n    \n    for (const tableHtml of lotoTablesHtml) {\n        // Lấy tên tỉnh từ tiêu đề\n        const titleMatch = tableHtml.match(/Loto (.*?) Thứ/);\n        if (titleMatch && titleMatch[1]) {\n            const provinceName = titleMatch[1].trim();\n            loto[provinceName] = {};\n            \n            // Lấy các hàng của bảng loto\n            const lotoRowRegex = /<td class=\"text-center\">(\\d+|-)<\\/td>\\s*<td.*?>([\\s\\S]*?)<\\/td>/g;\n            let rowMatch;\n            while ((rowMatch = lotoRowRegex.exec(tableHtml)) !== null) {\n                const head = rowMatch[1]; // Đầu số (0, 1, 2... hoặc -)\n                if (head === '-') continue;\n\n                const numbersRaw = cleanText(rowMatch[2]); // Dãy số loto\n                \n                const numbers = numbersRaw === '-' ? [] : numbersRaw.replace(/,\\s*$/,'').split(/, | |,/g).filter(n => n);\n                loto[provinceName][head] = numbers;\n            }\n        }\n    }\n}\n\n// --- KẾT QUẢ CUỐI CÙNG ---\nreturn [{\n    json: {\n        ketQuaXoSo,\n        loto\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[944,432],"id":"96705baf-6b72-4f26-886c-779c15f4dac1","name":"Code3","onError":"continueRegularOutput"},{"parameters":{"url":"=https://api.phatnguoi.vn/web/tra-cuu/{{ $json.bienso }}/{{ $json.loaixe }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:140.0) Gecko/20100101 Firefox/140.0"},{"name":"Accept","value":"*/*"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br, zstd"},{"name":"Origin","value":"https://phatnguoi.vn"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"https://phatnguoi.vn/"},{"name":"Sec-Fetch-Dest","value":"empty"},{"name":"Sec-Fetch-Mode","value":"cors"},{"name":"Sec-Fetch-Site","value":"same-site"}]},"options":{"response":{}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[320,-160],"id":"ac31bcf6-2dc9-485a-97f1-1eb542798fe5","name":"phat-nguoi","retryOnFail":true,"onError":"continueRegularOutput"},{"parameters":{"url":"=https://xosodaiphat.com/{{ $json.khuvuc }}-{{ $json.date }}.html ","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate, br, zstd"},{"name":"Alt-Used","value":"xosodaiphat.com"},{"name":"Connection","value":"keep-alive"},{"name":"Upgrade-Insecure-Requests","value":"1"},{"name":"Sec-Fetch-Dest","value":"document"},{"name":"Sec-Fetch-Mode","value":"navigate"},{"name":"Sec-Fetch-Site","value":"same-origin"},{"name":"Sec-Fetch-User","value":"?1"},{"name":"Priority","value":"u=0, i"},{"name":"TE","value":"trailers"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[240,256],"id":"c9deac43-86f4-4fda-9dcd-623c944a87e1","name":"xo-so","retryOnFail":true,"onError":"continueRegularOutput"},{"parameters":{"jsCode":"// Lấy dữ liệu HTML từ phản hồi\nconst response = items[0].json;\nlet html = \"\";\n\n// Kiểm tra cấu trúc dữ liệu đầu vào\nif (response && response.data) {\n  html = response.data;\n} else if (response.body) {\n  html = response.body;\n} else if (typeof response === 'string') {\n  html = response;\n}\n\n// Kiểm tra xem có dữ liệu HTML không\nif (!html) {\n  return {\n    json: {\n      success: false,\n      message: \"Không tìm thấy dữ liệu HTML trong phản hồi\"\n    }\n  };\n}\n\n// Kiểm tra xem có phải là trang lỗi không\nif (html.includes(\"Sai mã xác nhận!\")) {\n  return {\n    json: {\n      success: false,\n      message: \"Sai mã xác nhận CAPTCHA\",\n      error: \"CAPTCHA_ERROR\"\n    }\n  };\n}\n\n// Hàm trích xuất giá trị từ span theo ID\nfunction extractSpanValue(html, spanId) {\n  const regex = new RegExp(`<span id=\"${spanId}\"[^>]*>([^<]+)<\\\\/span>`, 'i');\n  const match = html.match(regex);\n  return match ? match[1].trim() : \"\";\n}\n\n// Trích xuất thông tin từ HTML\nconst thongTinXe = {\n  // Thông tin chung\n  bienDangKy: extractSpanValue(html, \"LblBinDangKy\").replace(\"THÔNG TIN PHƯƠNG TIỆN BIỂN ĐĂNG KÝ:\", \"\").trim(),\n  nhanHieu: extractSpanValue(html, \"txtNhanHieu\"),\n  loaiPhuongTien: extractSpanValue(html, \"txtLoaiPT\"),\n  soKhung: extractSpanValue(html, \"txtSoKhung\"),\n  soMay: extractSpanValue(html, \"txtSoMay\"),\n  \n  // Thông số kỹ thuật\n  kichThuocBao: extractSpanValue(html, \"txtKichThuocBao\"),\n  kichThuocThungHang: extractSpanValue(html, \"txtKichThuocThung\"),\n  khoiLuongBanThan: extractSpanValue(html, \"txtTuTrongTK\"),\n  khoiLuongHangHoaChoPhep: extractSpanValue(html, \"txtTaiTrongGT\"),\n  soNguoiChoPhepCho: extractSpanValue(html, \"txtSoCho\"),\n  khoiLuongToanBo: extractSpanValue(html, \"txtTrLgToanBoGT\"),\n  soTrucChieuDaiCoSo: extractSpanValue(html, \"txtCdCsCtBx\"),\n  khoiLuongKeoTheo: extractSpanValue(html, \"txtTrLgMoocCP\"),\n  \n  // Kiểm định gần nhất\n  kiemDinh: {\n    ngayKiemDinh: extractSpanValue(html, \"txtNgayKD\"),\n    donViKiemDinh: extractSpanValue(html, \"txtTramKD\"),\n    soTemGCN: extractSpanValue(html, \"txtSoTemGCN\"),\n    hanHieuLuc: extractSpanValue(html, \"txtHanKDToi\")\n  },\n  \n  // Phí sử dụng đường bộ\n  phiDuongBo: {\n    ngayNopPhi: extractSpanValue(html, \"txtNgayNop\"),\n    donViThuPhi: extractSpanValue(html, \"txtDonVi\"),\n    soBienLai: extractSpanValue(html, \"txtBL_ID\"),\n    phiNopDenNgay: extractSpanValue(html, \"txtDenNgay\")\n  }\n};\n\n// Kiểm tra xem có dữ liệu xe không\nconst hasVehicleData = thongTinXe.bienDangKy && thongTinXe.nhanHieu;\n\n// Tính toán tình trạng kiểm định và phí đường bộ\nconst today = new Date();\nconst formatDate = (dateStr) => {\n  const [day, month, year] = dateStr.split('/');\n  return new Date(`${year}-${month}-${day}`);\n};\n\n// Tính ngày còn lại của kiểm định và phí đường bộ\nlet kiemDinhStatus = \"Không có thông tin\";\nlet phiDuongBoStatus = \"Không có thông tin\";\n\nif (thongTinXe.kiemDinh.hanHieuLuc) {\n  const expDate = formatDate(thongTinXe.kiemDinh.hanHieuLuc);\n  const daysLeft = Math.ceil((expDate - today) / (1000 * 60 * 60 * 24));\n  \n  if (daysLeft > 30) {\n    kiemDinhStatus = `Còn hạn (${daysLeft} ngày)`;\n  } else if (daysLeft > 0) {\n    kiemDinhStatus = `Sắp hết hạn (${daysLeft} ngày)`;\n  } else {\n    kiemDinhStatus = `Đã hết hạn (${Math.abs(daysLeft)} ngày)`;\n  }\n}\n\nif (thongTinXe.phiDuongBo.phiNopDenNgay) {\n  const expDate = formatDate(thongTinXe.phiDuongBo.phiNopDenNgay);\n  const daysLeft = Math.ceil((expDate - today) / (1000 * 60 * 60 * 24));\n  \n  if (daysLeft > 30) {\n    phiDuongBoStatus = `Còn hạn (${daysLeft} ngày)`;\n  } else if (daysLeft > 0) {\n    phiDuongBoStatus = `Sắp hết hạn (${daysLeft} ngày)`;\n  } else {\n    phiDuongBoStatus = `Đã hết hạn (${Math.abs(daysLeft)} ngày)`;\n  }\n}\n\n// Trả về kết quả\nreturn {\n  json: {\n    success: hasVehicleData,\n    message: hasVehicleData ? \"Tìm thấy thông tin phương tiện\" : \"Không tìm thấy thông tin phương tiện\",\n    data: thongTinXe,\n    status: {\n      kiemDinh: kiemDinhStatus,\n      phiDuongBo: phiDuongBoStatus\n    },\n    raw: hasVehicleData ? undefined : html // Chỉ trả về HTML gốc nếu không tìm thấy thông tin xe\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[608,816],"id":"80fd7782-0d06-4e5b-a127-36c5c79d0d09","name":"Code5","onError":"continueRegularOutput"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.loaixe }}","rightValue":0,"operator":{"type":"number","operation":"notEquals"},"id":"b796e213-5e79-4c03-9399-278e970a9971"}],"combinator":"and"},"renameOutput":true,"outputKey":"phatnguoi"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a8441e0b-ad4c-4581-9279-49eb5e6ed2f4","leftValue":"={{ $json.khuvuc }}","rightValue":"0","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"xoso"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2fa3822e-2570-4db0-9533-32e1175b8648","leftValue":"={{ $json.temdk }}","rightValue":"0","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"dangkiem"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"932233a1-9d25-4254-ab9c-b50e01bbf295","leftValue":"={{ $json.provinces }}","rightValue":"0","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"thoitiet"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"f9840d34-0a71-483f-b054-025356d53a74","leftValue":"={{ $json.video }}","rightValue":"0","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"video"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a30c93cb-4cfd-44c7-9fdf-7a0f322351db","leftValue":"={{ $json.vannien }}","rightValue":"0","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"vannien"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-672,272],"id":"3731b652-3952-4a18-a5b8-ddb06e2c6426","name":"Switch1"},{"parameters":{"url":"={{ $json.captchaUrl }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0"},{"name":"Accept","value":"image/avif,image/webp,image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://app.vr.org.vn/ptpublic/thongtinptpublic.aspx"},{"name":"Priority","value":"u=4, i"}]},"options":{"response":{"response":{"fullResponse":true,"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[784,592],"id":"0d00ea99-e200-4698-8a5c-cac52f24b73c","name":"Get File Captcha","retryOnFail":false,"maxTries":5,"waitBetweenTries":2000,"onError":"continueRegularOutput"},{"parameters":{"resource":"image","operation":"analyze","modelId":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"GPT-4O-MINI"},"text":"This is a captcha code, decode it and return only the result, note that the code distinguishes between uppercase, lowercase, and numbers.","inputType":"base64","options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[976,592],"id":"3ceb22ba-0284-4d4d-b94a-beb8c40807bf","name":"Text Captcha","retryOnFail":true,"credentials":{"openAiApi":{"id":"0e8wVB3CjQkuKMso","name":"OpenAi account"}},"onError":"continueRegularOutput"},{"parameters":{"method":"POST","url":"=http://app.vr.org.vn/ptpublic/thongtinptpublic.aspx","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Origin","value":"http://app.vr.org.vn"},{"name":"Connection","value":"keep-alive"},{"name":"Referer","value":"http://app.vr.org.vn/ptpublic/thongtinptpublic.aspx"},{"name":"Upgrade-Insecure-Requests","value":"1"},{"name":"Priority","value":"u=0, i"},{"name":"Cookie","value":"={{ $('Find URL Captcha').item.json.headers['set-cookie'][0] }}"}]},"sendBody":true,"contentType":"form-urlencoded","bodyParameters":{"parameters":[{"name":"__VIEWSTATE","value":"={{ $('Find Get Headers').item.json.viewstate }}"},{"name":"__VIEWSTATEGENERATOR","value":"={{ $('Find Get Headers').item.json.viewstategenerator }}"},{"name":"__EVENTVALIDATION","value":"={{ $('Find Get Headers').item.json.eventvalidation }}"},{"name":"txtBienDK","value":"={{ $('Start').item.json.bienso }}"},{"name":"TxtSoTem","value":"={{ $('Start').item.json.temdk }}"},{"name":"txtCaptcha","value":"={{ $json.content }}"},{"name":"CmdTraCuu","value":"Tra+cứu"}]},"options":{"response":{"response":{"fullResponse":true}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[448,816],"id":"430f2b37-1da0-4380-aca0-74e113abec86","name":"POST Payload","retryOnFail":true,"maxTries":5,"waitBetweenTries":2000,"onError":"continueRegularOutput"},{"parameters":{"url":"http://app.vr.org.vn/ptpublic/thongtinptpublic.aspx","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"},{"name":"Accept-Language","value":"en-US,en;q=0.5"},{"name":"Accept-Encoding","value":"gzip, deflate"},{"name":"Connection","value":"keep-alive"},{"name":"Upgrade-Insecure-Requests","value":"1"},{"name":"Priority","value":"u=0, i"}]},"options":{"response":{"response":{"fullResponse":true}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[416,592],"id":"ff87bb14-8abc-42ed-b23a-78f48d728aa7","name":"Find URL Captcha","retryOnFail":true,"waitBetweenTries":2000,"maxTries":5,"onError":"continueRegularOutput"},{"parameters":{"jsCode":"// Lấy toàn bộ phản hồi từ node trước (bao gồm data và headers)\nconst response = items[0].json;\nconst html = response.data;\nconst headers = response.headers;\n\n// Kiểm tra dữ liệu đầu vào\nif (!html) {\n  throw new Error(\"Không nhận được HTML từ node HTTP Request.\");\n}\nif (!headers || !headers['set-cookie']) {\n  throw new Error(\"Không tìm thấy header 'set-cookie' trong phản hồi. Hãy đảm bảo node HTTP Request đã bật 'Include Response Headers'.\");\n}\n\n// --- 1. TRÍCH XUẤT URL CAPTCHA ---\nconst captchaRegex = /<img id=\"captchaImage\"[^>]*?src=\"([^\"]+)\"/i;\nconst match = html.match(captchaRegex);\nif (!match || !match[1]) {\n  throw new Error(\"Không thể tìm thấy URL của ảnh captcha trong HTML.\");\n}\nconst relativeUrl = match[1];\nconst fullCaptchaUrl = 'http://app.vr.org.vn/ptpublic/' + relativeUrl;\n\n// --- 2. TRÍCH XUẤT CHÍNH XÁC GIÁ TRỊ COOKIE ---\n// Header 'set-cookie' là một mảng, ta lấy phần tử đầu tiên\nconst cookieHeader = headers['set-cookie'][0];\n// Chuỗi cookie có dạng \"ASP.NET_SessionId=value; path=/; ...\",\nconst fullCookieString = cookieHeader.split(';')[0]; \n\nif (!fullCookieString || !fullCookieString.startsWith('ASP.NET_SessionId')) {\n    throw new Error(\"Không thể trích xuất ASP.NET_SessionId từ cookie: \" + cookieHeader);\n}\n\n// Tách chuỗi bằng dấu '=' và lấy phần tử thứ hai (chính là giá trị session)\nconst cookieParts = fullCookieString.split('=');\nconst sessionId = cookieParts.length > 1 ? cookieParts[1] : null;\n\nif (!sessionId) {\n    throw new Error(\"Không thể trích xuất giá trị từ chuỗi cookie: \" + fullCookieString);\n}\n\n// --- 3. TRÍCH XUẤT __VIEWSTATE ---\nconst viewstateRegex = /<input type=\"hidden\" name=\"__VIEWSTATE\" id=\"__VIEWSTATE\" value=\"([^\"]+)\"/i;\nconst viewstateMatch = html.match(viewstateRegex);\nif (!viewstateMatch || !viewstateMatch[1]) {\n  throw new Error(\"Không thể tìm thấy __VIEWSTATE trong HTML.\");\n}\nconst viewstate = viewstateMatch[1];\n\n// --- 4. TRÍCH XUẤT __VIEWSTATEGENERATOR ---\nconst viewstategenRegex = /<input type=\"hidden\" name=\"__VIEWSTATEGENERATOR\" id=\"__VIEWSTATEGENERATOR\" value=\"([^\"]+)\"/i;\nconst viewstategenMatch = html.match(viewstategenRegex);\nif (!viewstategenMatch || !viewstategenMatch[1]) {\n  throw new Error(\"Không thể tìm thấy __VIEWSTATEGENERATOR trong HTML.\");\n}\nconst viewstategenerator = viewstategenMatch[1];\n\n// --- 5. TRÍCH XUẤT __EVENTVALIDATION ---\nconst eventvalidationRegex = /<input type=\"hidden\" name=\"__EVENTVALIDATION\" id=\"__EVENTVALIDATION\" value=\"([^\"]+)\"/i;\nconst eventvalidationMatch = html.match(eventvalidationRegex);\nif (!eventvalidationMatch || !eventvalidationMatch[1]) {\n  throw new Error(\"Không thể tìm thấy __EVENTVALIDATION trong HTML.\");\n}\nconst eventvalidation = eventvalidationMatch[1];\n\n// --- KẾT QUẢ ---\n// Trả về URL captcha, session ID và các tham số form\nreturn [{\n  json: {\n    captchaUrl: fullCaptchaUrl,\n    sessionId: sessionId,\n    viewstate: viewstate,\n    viewstategenerator: viewstategenerator,\n    eventvalidation: eventvalidation,\n    cookieHeader: `ASP.NET_SessionId=${sessionId}`  // Cookie header đầy đủ để sử dụng trong request tiếp theo\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[608,592],"id":"ca916cee-90ce-4c9b-a217-d4292e247517","name":"Find Get Headers","onError":"continueRegularOutput"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"889790c7-7628-41af-808f-171c1df58ce3","leftValue":"={{ $json.error }}","rightValue":"CAPTCHA_ERROR","operator":{"type":"string","operation":"notContains"}},{"id":"c483dd3b-cb0d-4281-9c81-bab490fb4295","leftValue":"={{ $json.error.status }}","rightValue":500,"operator":{"type":"number","operation":"notEquals"}},{"id":"3b429215-82b0-439f-a946-412149aa8625","leftValue":"={{ $json.message }}","rightValue":"Không tìm thấy dữ liệu HTML trong phản hồi","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[784,816],"id":"d11c7cc0-e8a7-4395-a8bb-e6a46ab6822d","name":"If Erro","onError":"continueRegularOutput"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d4301437-5b14-4ceb-928b-4a1f948535c6","leftValue":"={{ $runIndex }}","rightValue":3,"operator":{"type":"number","operation":"lte"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[976,832],"id":"08c83718-d80b-400d-9a1c-a56b3d3caf80","name":"Retry Max 5","onError":"continueRegularOutput"},{"parameters":{"url":"=https://dbtt.edu.vn{{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept-Language","value":"vi"},{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[880,1104],"id":"25828c49-b0f9-4f31-92dc-c9c914c58ab8","name":"tinhthanhpho"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"thời tiết hiện tại\": lineHienTai,\n        \"dự báo theo ngày\": lineNgay,\n        \"dự báo theo giờ\": lineGio,\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,1088],"id":"f4561146-0bb8-4cfa-b67b-fa931435b6f8","name":"Code9"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"thời tiết hiện tại\": lineHienTai,\n        \"dự báo theo ngày\": lineNgay,\n        \"dự báo theo giờ\": lineGio,\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1584,1280],"id":"9a72c0f9-a6e1-4018-a78c-2d82842a1992","name":"Code10"},{"parameters":{"jsCode":"// Lấy dữ liệu HTML từ input\nconst html_content = $input.first().json.data;\n\nfunction parseViewCount(viewText) {\n    /**\n     * Chuyển đổi chuỗi lượt xem thành số nguyên\n     * Xử lý các trường hợp: \"1.2M\", \"500K\", \"1.234.567\", etc.\n     */\n    if (!viewText) return 0;\n    \n    // Loại bỏ từ \"lượt xem\" và khoảng trắng\n    let cleanText = viewText.replace(/ lượt xem| views/g, '').trim();\n    \n    // Xử lý trường hợp có M (triệu), K (nghìn), B (tỷ)\n    let multiplier = 1;\n    if (cleanText.endsWith('M')) {\n        multiplier = 1000000;\n        cleanText = cleanText.slice(0, -1);\n    } else if (cleanText.endsWith('K')) {\n        multiplier = 1000;\n        cleanText = cleanText.slice(0, -1);\n    } else if (cleanText.endsWith('B')) {\n        multiplier = 1000000000;\n        cleanText = cleanText.slice(0, -1);\n    }\n    \n    // Loại bỏ dấu phân cách\n    if (multiplier > 1) {\n        // Với K, M, B - giữ lại dấu chấm thập phân\n        cleanText = cleanText.replace(/,/g, '');\n    } else {\n        // Với số nguyên - loại bỏ tất cả dấu phân cách\n        cleanText = cleanText.replace(/[.,]/g, '');\n    }\n    \n    try {\n        if (multiplier > 1) {\n            return Math.floor(parseFloat(cleanText) * multiplier);\n        } else {\n            return parseInt(cleanText) || 0;\n        }\n    } catch (error) {\n        return 0;\n    }\n}\n\n// Tìm đối tượng JavaScript 'ytInitialData' trong chuỗi HTML bằng regex\nconst regex = /var ytInitialData = (.*?);<\\/script>/s;\nconst match = html_content.match(regex);\n\nif (match && match[1]) {\n    const jsonStr = match[1];\n    \n    try {\n        const data = JSON.parse(jsonStr);\n        \n        // Lấy danh sách các video từ dữ liệu\n        const contents = data.contents.twoColumnSearchResultsRenderer.primaryContents.sectionListRenderer.contents;\n        \n        const videoList = [];\n        \n        for (const section of contents) {\n            if (section.itemSectionRenderer) {\n                for (const item of section.itemSectionRenderer.contents) {\n                    if (item.videoRenderer) {\n                        const videoInfo = item.videoRenderer;\n                        \n                        // Lấy tiêu đề video - xử lý cả runs và simpleText\n                        let title = \"N/A\";\n                        if (videoInfo.title) {\n                            if (videoInfo.title.runs && videoInfo.title.runs.length > 0) {\n                                title = videoInfo.title.runs[0].text || \"N/A\";\n                            } else if (videoInfo.title.simpleText) {\n                                title = videoInfo.title.simpleText;\n                            }\n                        }\n                        \n                        // Xử lý chuỗi lượt xem\n                        let viewCount = 0;\n                        if (videoInfo.viewCountText) {\n                            let viewCountText = '';\n                            if (videoInfo.viewCountText.simpleText) {\n                                viewCountText = videoInfo.viewCountText.simpleText;\n                            } else if (videoInfo.viewCountText.runs) {\n                                viewCountText = videoInfo.viewCountText.runs.map(run => run.text || '').join('');\n                            }\n                            viewCount = parseViewCount(viewCountText);\n                        }\n                        \n                        // Lấy video ID và tạo URL\n                        const videoId = videoInfo.videoId;\n                        if (videoId) {\n                            const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;\n                            videoList.push({\n                                url: videoUrl,\n                                views: viewCount,\n                                title: title\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Sắp xếp danh sách video theo lượt xem giảm dần\n        const sortedVideos = videoList.sort((a, b) => b.views - a.views);\n        \n        // Lấy 10 video đầu tiên\n        const top10Videos = sortedVideos.slice(0, 10);\n        \n        // In kết quả\n        console.log(\"Top 10 video có lượt xem nhiều nhất:\");\n        console.log(\"=\".repeat(80));\n        \n        top10Videos.forEach((video, index) => {\n            console.log(`${(index + 1).toString().padStart(2)}. ${video.title}`);\n            console.log(`    Lượt xem: ${video.views.toLocaleString()}`);\n            console.log(`    Link: ${video.url}`);\n            console.log(\"-\".repeat(80));\n        });\n        \n        // Return kết quả để có thể sử dụng trong workflow\n        return top10Videos;\n        \n    } catch (error) {\n        console.log(`Lỗi khi phân tích JSON: ${error.message}`);\n        return [];\n    }\n} else {\n    console.log(\"Không tìm thấy 'ytInitialData' trong HTML.\");\n    \n    // Thử tìm với pattern khác\n    const alternativeRegex = /window\\[\"ytInitialData\"\\] = (.*?);<\\/script>/s;\n    const alternativeMatch = html_content.match(alternativeRegex);\n    \n    if (alternativeMatch) {\n        console.log(\"Tìm thấy ytInitialData với pattern thay thế - hãy thử lại với pattern này.\");\n    } else {\n        console.log(\"Không tìm thấy dữ liệu YouTube nào trong HTML.\");\n    }\n    return [];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[752,1728],"id":"443e7312-57e1-46e8-ba8c-b6d41894c1b3","name":"10video"},{"parameters":{"url":"=https://www.youtube.com/results","sendQuery":true,"queryParameters":{"parameters":[{"name":"search_query","value":"={{ $json.video }}"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"},{"name":"Accept-Language","value":"vi-VN,vi;q=0.9,en;q=0.8"}]},"options":{"response":{"response":{}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[480,1712],"id":"0be49e8c-ee1f-4150-adc3-9ad37ba44826","name":"HTTP Request1"},{"parameters":{"jsCode":"// Input: items[0].json.data = HTML chuỗi\n// Output: items[0].json.text = chuỗi định dạng theo bố cục yêu cầu\n\nfunction decodeHtmlEntities(str) {\n  if (!str) return '';\n  str = str.replace(/&#(\\d+);/g, (_, code) => String.fromCharCode(parseInt(code, 10)));\n  str = str.replace(/&#x([0-9a-fA-F]+);/g, (_, code) => String.fromCharCode(parseInt(code, 16)));\n  const map = { '&nbsp;': ' ', '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"', '&apos;': \"'\" };\n  return str.replace(/&[a-zA-Z]+;/g, m => map[m] || m);\n}\n\nfunction stripTags(str) {\n  return decodeHtmlEntities(String(str || '')\n    .replace(/<br\\s*\\/?>/gi, '\\n')\n    .replace(/<[^>]*>/g, ''))\n    .replace(/\\u00A0/g, ' ')\n    .trim();\n}\n\n// Lấy bảng <table class=\"table1\"> đầu tiên trong HTML\nfunction firstTable1(html) {\n  const m = html.match(/<table[^>]*class=\"[^\"]*\\btable1\\b[^\"]*\"[^>]*>[\\s\\S]*?<\\/\\s*table\\s*>/i);\n  return m ? m[0] : '';\n}\n\n// Bắt giá trị theo nhãn bên trái trong cùng một <tr>\nfunction textAfter(label, htmlScope) {\n  const re = new RegExp(\n    `<tr>\\\\s*<td[^>]*>\\\\s*${label}\\\\s*<\\\\/\\\\s*td\\\\s*>\\\\s*<td[^>]*>([\\\\s\\\\S]*?)<\\\\/\\\\s*td\\\\s*>\\\\s*<\\\\/\\\\s*tr\\\\s*>`,\n    'i'\n  );\n  const m = htmlScope.match(re);\n  return m ? stripTags(m[1]) : '';\n}\n\n// Tìm table theo tiêu đề h3/h2 gần nhất (linh hoạt)\nfunction extractTableByTitle(html, titleRegex) {\n  const re = new RegExp(\n    `<table[^>]*class=\"[^\"]*table1[^\"]*\"[^>]*>[\\\\s\\\\S]*?${titleRegex}[\\\\s\\\\S]*?<\\\\/\\\\s*table\\\\s*>`,\n    'i'\n  );\n  const m = html.match(re);\n  return m ? m[0] : '';\n}\n\nfunction extractRows3cols(tableHtml) {\n  const rows = [];\n  const trRe = /<tr>([\\s\\S]*?)<\\/\\s*tr\\s*>/gi;\n  let m;\n  while ((m = trRe.exec(tableHtml))) {\n    const tds = Array.from(m[1].matchAll(/<td[^>]*>([\\s\\S]*?)<\\/\\s*td\\s*>/gi)).map(x => stripTags(x[1]));\n    if (tds.length === 3) rows.push({ c1: tds[0], c2: tds[1], c3: tds[2] });\n  }\n  return rows;\n}\n\nfunction extractSectionByH3Title(html, title) {\n  const re = new RegExp(\n    `<table[^>]*class=\"[^\"]*table1[^\"]*\"[^>]*>[\\\\s\\\\S]*?<h3[^>]*>\\\\s*${title}\\\\s*<\\\\/\\\\s*h3\\\\s*>[\\\\s\\\\S]*?<\\\\/\\\\s*table\\\\s*>`,\n    'i'\n  );\n  const m = html.match(re);\n  return m ? m[0] : '';\n}\n\nfunction extractGioBlock(html, blockTitle) {\n  const tbl = extractSectionByH3Title(html, blockTitle);\n  const rows = extractRows3cols(tbl);\n  return rows.map(r => ({ time: r.c1, diaChi: r.c2, sao: r.c3 }));\n}\n\nfunction extractTuoiXungKhac(html) {\n  const sec = extractTableByTitle(html, /Tuổi xung khắc/i);\n  const body = stripTags(sec);\n  const xungNgay = (body.match(/Xung ngày:\\s*([^\\n]+)/i)?.[1] || '').split(/,\\s*/).filter(Boolean);\n  const xungThang = (body.match(/Xung tháng:\\s*([^\\n]+)/i)?.[1] || '').split(/,\\s*/).filter(Boolean);\n  return { xungNgay, xungThang };\n}\n\nfunction extractNgocHap(html) {\n  const goodTbl = extractTableByTitle(html, /Ngày tốt xấu theo ngọc hạp thông thư[\\s\\S]*?Sao tốt/i);\n  const good = [];\n  let m;\n  const trRe = /<tr>\\s*<td[^>]*>([\\s\\S]*?)<\\/\\s*td\\s*>\\s*<td[^>]*>([\\s\\S]*?)<\\/\\s*td\\s*>\\s*<\\/\\s*tr\\s*>/gi;\n  while ((m = trRe.exec(goodTbl))) {\n    const left = stripTags(m[1]); const right = stripTags(m[2]);\n    if (/Sao tốt|Việc nên làm/i.test(left)) continue;\n    if (left && right) good.push({ sao: left, note: right });\n  }\n  const badTbl = extractTableByTitle(html, /Sao xấu/i);\n  const bad = [];\n  let m2;\n  const trRe2 = /<tr>\\s*<td[^>]*>([\\s\\S]*?)<\\/\\s*td\\s*>\\s*<td[^>]*>([\\s\\S]*?)<\\/\\s*td\\s*>\\s*<\\/\\s*tr\\s*>/gi;\n  while ((m2 = trRe2.exec(badTbl))) {\n    const left = stripTags(m2[1]); const right = stripTags(m2[2]);\n    if (/Sao xấu|Việc nên kỵ/i.test(left)) continue;\n    if (left && right) bad.push({ sao: left, note: right });\n  }\n  return { good, bad };\n}\n\nfunction extractXuatHanh(html) {\n  const tbl = extractTableByTitle(html, /Ngày, giờ, hướng xuất hành/i);\n  const text = stripTags(tbl);\n  const hy = (text.match(/Hỷ thần[^:]*:\\s*Hướng\\s*([^\\n]+)/i)?.[1] || '').trim();\n  const tai = (text.match(/Tài thần[^:]*:\\s*Hướng\\s*([^\\n]+)/i)?.[1] || '').trim();\n  return { hy, tai };\n}\n\nfunction extractKhongMinh(html) {\n  const tbl = extractTableByTitle(html, /Ngày xuất hành[^<]*theo Khổng Minh/i);\n  const body = stripTags(tbl);\n  const m = body.match(/([^\\n]+?)\\s*\\((TỐT|Tốt|XẤU|Xấu)\\)\\s*([^\\n]+)/i);\n  if (m) return { ten: m[1].trim(), danhGia: m[2].toUpperCase(), moTa: m[3].trim() };\n  return { ten: '', danhGia: '', moTa: '' };\n}\n\nfunction extractLyThuanPhong(html) {\n  const all = [];\n  const secRe = /<div class=\"nam-xua-item-1s\">([\\s\\S]*?)<\\/\\s*div\\s*>\\s*<\\/\\s*div\\s*>/gi;\n  let m;\n  while ((m = secRe.exec(html))) {\n    const block = m[1];\n    const leftRaw = block.match(/<div[^>]*left-nam-xua[^>]*>[\\s\\S]*?<span[^>]*>([\\s\\S]*?)<\\/\\s*span\\s*>/i)?.[1] || '';\n    const right = block.match(/<div[^>]*right-nam-xua[^>]*>[\\s\\S]*?<\\/\\s*div\\s*>/i)?.[0] || '';\n    const times = stripTags(leftRaw).split(/\\s*\\n\\s*/).map(s => s.trim()).filter(Boolean);\n    const nhan = (right.match(/>\\s*([^:<]+):\\s*<span/i)?.[1] || '').trim();\n    const danhGia = (right.match(/(TỐT|XẤU)/i)?.[1] || '').toUpperCase();\n    all.push({ nhan, danhGia, times });\n  }\n  const tot = [];\n  const xau = [];\n  for (const it of all) {\n    if (it.danhGia === 'TỐT') tot.push(`${it.nhan} (${it.times.join(', ')})`);\n    else if (it.danhGia === 'XẤU') xau.push(`${it.nhan} (${it.times.join(', ')})`);\n  }\n  return { tot, xau };\n}\n\nfunction extractNguHanhTrachNhat(html) {\n  const tbl = extractTableByTitle(html, /Ngũ hành[^<]*\\(trạch nhật\\)/i);\n  const body = stripTags(tbl);\n  const nienMenh = (body.match(/Ngũ hành niên mệnh:\\s*([^\\n]+)/i)?.[1] || '').trim();\n  const ngayCat = body.match(/ngày cát|\\(bảo nhật\\)/i) ? 'Ngày cát (bảo nhật)' : '';\n  const kyTuoiLine = (body.match(/kị tuổi:\\s*([^\\n]+)/i)?.[1] || '').trim();\n  const kyTuoi = kyTuoiLine ? kyTuoiLine.split(/,\\s*/).filter(Boolean) : [];\n  const hopXungLine = (body.match(/Ngày\\s+[^\\n]+/i)?.[0] || '').trim();\n  const tamSat = (body.match(/Tam Sát kị mệnh tuổi\\s*:\\s*([^\\n]+)/i)?.[1] || '').trim();\n  return { nienMenh, ngayCat, kyTuoi, hopXungLine, tamSat };\n}\n\n// ---------- BẮT ĐẦU ----------\n// CHÚ Ý: Function node dùng \"items\", KHÔNG dùng $input/$('...') như Expression.\nconst html = String(items?.[0]?.json?.data || '');\n\n// Lấy bảng đầu (thông tin ngày tháng…)\nconst infoTable = firstTable1(html);\n\n// Các trường trong bảng đầu\nconst duongLich = textAfter('Dương lịch', infoTable);\nconst amLich   = textAfter('Âm lịch', infoTable).replace(/\\s+/g, ' ').trim();\nconst canChi   = textAfter('Can chi', infoTable);\nconst nguHanh  = textAfter('Ngũ hành', infoTable);\nconst loaiNgay = textAfter('Ngày', infoTable);\nconst tietKhi  = stripTags(\n  (infoTable.match(/Tiết Khí[\\s\\S]*?<td[^>]*>([\\s\\S]*?)<\\/\\s*td\\s*>/i)?.[1]) || ''\n);\n\n// Giờ hoàng đạo / hắc đạo\nconst hoangDao = extractGioBlock(html, 'Giờ Hoàng đạo');\nconst hacDao   = extractGioBlock(html, 'Giờ Hắc đạo');\n\n// Ngũ hành trạch nhật\nconst nh = extractNguHanhTrachNhat(html);\n\n// Trực ngày\nconst trucTbl = extractTableByTitle(html, /Xem ngày tốt xấu theo trực/i);\nconst trucNgay = stripTags(trucTbl).replace(/Xem ngày tốt xấu theo trực/i, '').trim();\n\n// Tuổi xung khắc\nconst { xungNgay, xungThang } = extractTuoiXungKhac(html);\n\n// Ngọc hạp\nconst nhap = extractNgocHap(html);\n\n// Xuất hành\nconst { hy, tai } = extractXuatHanh(html);\n\n// Khổng Minh\nconst km = extractKhongMinh(html);\n\n// Lý Thuần Phong\nconst ltp = extractLyThuanPhong(html);\n\n// ---------- KẾT QUẢ THEO BỐ CỤC ----------\nconst text =\n`🗓 Ngày tháng\n\nDương lịch: ${duongLich || ''}\nÂm lịch: ${amLich || ''}\nCan chi: ${canChi || ''}\nNgũ hành: ${nguHanh || ''}\nNgày: ${loaiNgay || ''}\nTiết khí: ${tietKhi || ''}\n\n⏰ Giờ hoàng đạo – hắc đạo\n\nGiờ Hoàng đạo (tốt):\n${hoangDao.map(x => `${x.time} (${x.diaChi} – ${x.sao})`).join('\\n')}\n\nGiờ Hắc đạo (xấu):\n${hacDao.map(x => `${x.time} (${x.diaChi} – ${x.sao})`).join('\\n')}\n\n📜 Ngũ hành (trạch nhật)\n\nNiên mệnh: ${nh.nienMenh || ''}\n${nh.ngayCat ? (nh.ngayCat[0].toUpperCase() + nh.ngayCat.slice(1)) : ''}\nKỵ tuổi: ${nh.kyTuoi.join(', ') || ''}\nHợp & xung: ${nh.hopXungLine || ''}\n${nh.tamSat ? `Tam Sát kỵ mệnh tuổi: ${nh.tamSat}` : ''}\n\n📅 Trực ngày\n\n${trucNgay || ''}\n\n⚖ Tuổi xung khắc\n\nXung ngày: ${xungNgay.join(', ') || ''}\nXung tháng: ${xungThang.join(', ') || ''}\n\n💠 Ngọc hạp thông thư\n\nSao tốt:\n${nhap.good.map(g => `${g.sao}: ${g.note}`).join('\\n')}\n\nSao xấu:\n${nhap.bad.map(b => `${b.sao}: ${b.note}`).join('\\n')}\n\n🧭 Xuất hành\n\nHỷ thần: ${hy ? `${hy} (tốt)` : ''}\nTài thần: ${tai ? `${tai} (tốt)` : ''}\n\nNgày xuất hành theo Khổng Minh:\n${km.ten ? `${km.ten} (${km.danhGia === 'TỐT' ? 'Tốt' : 'Xấu'}) – ${km.moTa}` : ''}\n\n⏳ Giờ xuất hành theo Lý Thuần Phong\n\nXấu: ${ltp.xau.join(', ')}\nTốt: ${ltp.tot.join(', ')}\n`.replace(/[ \\t]+\\n/g, '\\n').trim();\n\nreturn [{ json: { text } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2592,1008],"id":"241bd00f-9495-471e-b950-69fa1d21e152","name":"Code13"},{"parameters":{"url":"=https://lichngaytot.com/Ajax/DoiNgayAmDuongAjax?Date={{ $json.vannien.split('-')[0] }}&Month={{ $json.vannien.split('-')[1] }}&Year={{ $json.vannien.split('-')[2] }}&Type={{ $('Start').item.json.type }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[624,2128],"id":"1399aa85-0137-44d4-9759-54322d1f0865","name":"vannien"},{"parameters":{"jsCode":"function decodeHtmlEntities(str) {\n  if (!str) return '';\n  // Giải mã số thập phân trước rồi mới đến thập lục phân\n  str = str.replace(/&#(\\d+);/g, (_, code) => String.fromCharCode(parseInt(code, 10)));\n  str = str.replace(/&#x([0-9a-fA-F]+);/g, (_, code) => String.fromCharCode(parseInt(code, 16)));\n  const map = { '&nbsp;': ' ', '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"', '&apos;': \"'\" };\n  return str.replace(/&[a-zA-Z]+;/g, m => map[m] || m);\n}\n\nfunction stripTags(str) {\n  return decodeHtmlEntities(String(str || '')\n    .replace(/<br\\s*\\/?>/gi, '\\n')\n    .replace(/<[^>]+>/g, '')) // sửa [^>]* thành [^>]+ để không match quá rộng\n    .replace(/\\u00A0/g, ' ')\n    .trim();\n}\n\nfunction firstTable1(html) {\n  const m = html.match(/<table[^>]*class=\"[^\"]*\\btable1\\b[^\"]*\"[^>]*>[\\s\\S]*?<\\/table>/i);\n  return m ? m[0] : '';\n}\n\nfunction textAfter(label, htmlScope) {\n  if (!htmlScope) return '';\n  // Không dùng \\s* trong </td> để tránh match sai, dùng \\s* trong <td[^>]*> vẫn ổn\n  const re = new RegExp(\n    `<tr>\\\\s*<td[^>]*>\\\\s*${label}\\\\s*<\\\\/td>\\\\s*<td[^>]*>([\\\\s\\\\S]*?)<\\\\/td>\\\\s*<\\\\/tr>`,\n    'i'\n  );\n  const m = htmlScope.match(re);\n  return m ? stripTags(m[1]) : '';\n}\n\nfunction extractTableByTitle(html, titleRegex) {\n  if (!html) return '';\n  // Tìm tiêu đề (h2 hoặc h3) theo titleRegex\n  const titleRe = new RegExp(`<h[23][^>]*>\\\\s*${titleRegex.source}\\\\s*<\\\\/h[23]>`, 'i');\n  const titleMatch = html.match(titleRe);\n  if (!titleMatch) return '';\n  const startIndex = titleMatch.index + titleMatch[0].length;\n  const subHtml = html.slice(startIndex);\n  const tblMatch = subHtml.match(/<table[^>]*class=\"[^\"]*\\btable1\\b[^\"]*\"[^>]*>[\\s\\S]*?<\\/table>/i);\n  return tblMatch ? tblMatch[0] : '';\n}\n\nfunction extractRows3cols(tableHtml) {\n  if (!tableHtml) return [];\n  const rows = [];\n  const trRe = /<tr>([\\s\\S]*?)<\\/tr>/gi;\n  let m;\n  while ((m = trRe.exec(tableHtml))) {\n    const tds = Array.from(m[1].matchAll(/<td[^>]*>([\\s\\S]*?)<\\/td>/gi)).map(x => stripTags(x[1]));\n    if (tds.length === 3) rows.push({ c1: tds[0], c2: tds[1], c3: tds[2] });\n  }\n  return rows;\n}\n\nfunction extractSectionByH3Title(html, blockTitle) {\n  if (!html) return '';\n  const re = new RegExp(\n    `<table[^>]*class=\"[^\"]*table1[^\"]*\"[^>]*>[\\\\s\\\\S]*?<h3[^>]*>\\\\s*${blockTitle}\\\\s*<\\\\/h3>[\\\\s\\\\S]*?<\\\\/table>`,\n    'i'\n  );\n  const m = html.match(re);\n  return m ? m[0] : '';\n}\n\nfunction extractGioBlock(html, blockTitle) {\n  const tbl = extractSectionByH3Title(html, blockTitle);\n  const rows = extractRows3cols(tbl);\n  return rows.map(r => ({ time: r.c1, diaChi: r.c2, sao: r.c3 }));\n}\n\nfunction extractTuoiXungKhac(html) {\n  const sec = extractTableByTitle(html, /Tuổi xung khắc/i);\n  if (!sec) return { xungNgay: [], xungThang: [] };\n  const body = stripTags(sec);\n  const xungNgay = (body.match(/Xung ngày:\\s*([^\\n]+)/i)?.[1] || '').split(/,\\s*/).filter(Boolean);\n  const xungThang = (body.match(/Xung tháng:\\s*([^\\n]+)/i)?.[1] || '').split(/,\\s*/).filter(Boolean);\n  return { xungNgay, xungThang };\n}\n\nfunction extractNgocHap(html) {\n  const goodTbl = extractTableByTitle(html, /Ngày tốt xấu theo ngọc hạp thông thư[\\s\\S]*?Sao tốt/i);\n  const good = [];\n  if (goodTbl) {\n    const trRe = /<tr>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>\\s*<\\/tr>/gi;\n    let m;\n    while ((m = trRe.exec(goodTbl))) {\n      const left = stripTags(m[1]);\n      const right = stripTags(m[2]);\n      if (/Sao tốt|Việc nên làm/i.test(left)) continue;\n      if (left && right) good.push({ sao: left, note: right });\n    }\n  }\n  const badTbl = extractTableByTitle(html, /Sao xấu/i);\n  const bad = [];\n  if (badTbl) {\n    const trRe2 = /<tr>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>\\s*<\\/tr>/gi;\n    let m2;\n    while ((m2 = trRe2.exec(badTbl))) {\n      const left = stripTags(m2[1]);\n      const right = stripTags(m2[2]);\n      if (/Sao xấu|Việc nên kỵ/i.test(left)) continue;\n      if (left && right) bad.push({ sao: left, note: right });\n    }\n  }\n  return { good, bad };\n}\n\nfunction extractXuatHanh(html) {\n  const tbl = extractTableByTitle(html, /Ngày, giờ, hướng xuất hành/i);\n  if (!tbl) return { hy: '', tai: '' };\n  const text = stripTags(tbl);\n  const hy = (text.match(/Hỷ thần[^:]*:\\s*Hướng\\s*([^\\n]+)/i)?.[1] || '').trim();\n  const tai = (text.match(/Tài thần[^:]*:\\s*Hướng\\s*([^\\n]+)/i)?.[1] || '').trim();\n  return { hy, tai };\n}\n\nfunction extractKhongMinh(html) {\n  const tbl = extractTableByTitle(html, /Ngày xuất hành[^<]*theo Khổng Minh/i);\n  if (!tbl) return { ten: '', danhGia: '', moTa: '' };\n  const body = stripTags(tbl);\n  const m = body.match(/([^\\n]+?)\\s*\\((TỐT|Tốt|XẤU|Xấu)\\)\\s*([^\\n]+)/i);\n  if (m) return { ten: m[1].trim(), danhGia: m[2].toUpperCase(), moTa: m[3].trim() };\n  return { ten: '', danhGia: '', moTa: '' };\n}\n\nfunction extractLyThuanPhong(html) {\n  const all = [];\n  const secRe = /<div class=\"nam-xua-item-1s\">([\\s\\S]*?)<\\/div>\\s*<\\/div>/gi;\n  let m;\n  while ((m = secRe.exec(html))) {\n    const block = m[1];\n    const leftRaw = block.match(/<div[^>]*left-nam-xua[^>]*>[\\s\\S]*?<span[^>]*>([\\s\\S]*?)<\\/span>/i)?.[1] || '';\n    const right = block.match(/<div[^>]*right-nam-xua[^>]*>[\\s\\S]*?<\\/div>/i)?.[0] || '';\n    const times = stripTags(leftRaw).split(/\\s*\\n\\s*/).map(s => s.trim()).filter(Boolean);\n    const nhan = (right.match(/>\\s*([^:<]+):\\s*<span/i)?.[1] || '').trim();\n    const danhGia = (right.match(/(TỐT|XẤU)/i)?.[1] || '').toUpperCase();\n    all.push({ nhan, danhGia, times });\n  }\n  const tot = [];\n  const xau = [];\n  for (const it of all) {\n    if (it.danhGia === 'TỐT') tot.push(`${it.nhan} (${it.times.join(', ')})`);\n    else if (it.danhGia === 'XẤU') xau.push(`${it.nhan} (${it.times.join(', ')})`);\n  }\n  return { tot, xau };\n}\n\nfunction extractNguHanhTrachNhat(html) {\n  const tbl = extractTableByTitle(html, /Ngũ hành[^<]*\\(trạch nhật\\)/i);\n  if (!tbl) return { nienMenh: '', ngayCat: '', kyTuoi: [], hopXungLine: '', tamSat: '' };\n  const body = stripTags(tbl);\n  const nienMenh = (body.match(/Ngũ hành niên mệnh:\\s*([^\\n]+)/i)?.[1] || '').trim();\n  const ngayCat = body.match(/ngày cát|\\(bảo nhật\\)/i) ? 'Ngày cát (bảo nhật)' : '';\n  const kyTuoiLine = (body.match(/kị tuổi:\\s*([^\\n]+)/i)?.[1] || '').trim();\n  const kyTuoi = kyTuoiLine ? kyTuoiLine.split(/,\\s*/).filter(Boolean) : [];\n  const hopXungLine = (body.match(/Hợp & xung:\\s*([^\\n]+)/i)?.[1] || '').trim();\n  const tamSat = (body.match(/Tam Sát kị mệnh tuổi\\s*:\\s*([^\\n]+)/i)?.[1] || '').trim();\n  return { nienMenh, ngayCat, kyTuoi, hopXungLine, tamSat };\n}\n\n// ---------- BẮT ĐẦU ----------\n// Function node dùng \"items\"\nconst html = String(items?.[0]?.json?.data || '');\n\n// Lấy bảng đầu (thông tin ngày tháng…)\nconst infoTable = firstTable1(html);\n\n// Các trường trong bảng đầu\nconst duongLich = textAfter('Dương lịch', infoTable);\nconst amLich = textAfter('Âm lịch', infoTable).replace(/\\s+/g, ' ').trim();\nconst canChi = textAfter('Can chi', infoTable);\nconst nguHanh = textAfter('Ngũ hành', infoTable);\nconst loaiNgay = textAfter('Ngày', infoTable);\nconst tietKhi = stripTags(\n  (infoTable.match(/Tiết Khí[\\s\\S]*?<td[^>]*>([\\s\\S]*?)<\\/td>/i)?.[1]) || ''\n);\n\n// Giờ hoàng đạo / hắc đạo\nconst hoangDao = extractGioBlock(html, 'Giờ Hoàng đạo');\nconst hacDao = extractGioBlock(html, 'Giờ Hắc đạo');\n\n// Ngũ hành trạch nhật\nconst nh = extractNguHanhTrachNhat(html);\n\n// Trực ngày\nconst trucTbl = extractTableByTitle(html, /Xem ngày tốt xấu theo trực/i);\nconst trucNgay = stripTags(trucTbl).replace(/Xem ngày tốt xấu theo trực/i, '').trim();\n\n// Tuổi xung khắc\nconst { xungNgay, xungThang } = extractTuoiXungKhac(html);\n\n// Ngọc hạp\nconst nhap = extractNgocHap(html);\n\n// Xuất hành\nconst { hy, tai } = extractXuatHanh(html);\n\n// Khổng Minh\nconst km = extractKhongMinh(html);\n\n// Lý Thuần Phong\nconst ltp = extractLyThuanPhong(html);\n\n// ---------- KẾT QUẢ THEO BỐ CỤC ----------\nconst text =\n`\n\n⏰ Giờ hoàng đạo – hắc đạo\n\nGiờ Hoàng đạo (tốt):\n${hoangDao.length ? hoangDao.map(x => `${x.time} (${x.diaChi} – ${x.sao})`).join('\\n') : 'Không có dữ liệu'}\n\nGiờ Hắc đạo (xấu):\n${hacDao.length ? hacDao.map(x => `${x.time} (${x.diaChi} – ${x.sao})`).join('\\n') : 'Không có dữ liệu'}\n\n📜 Ngũ hành (trạch nhật)\n\nNiên mệnh: ${nh.nienMenh || ''}\n${nh.ngayCat ? (nh.ngayCat[0].toUpperCase() + nh.ngayCat.slice(1)) : ''}\nKỵ tuổi: ${nh.kyTuoi.length ? nh.kyTuoi.join(', ') : ''}\nHợp & xung: ${nh.hopXungLine || ''}\n${nh.tamSat ? `Tam Sát kị mệnh tuổi: ${nh.tamSat}` : ''}\n\n📅 Trực ngày\n\n${trucNgay || 'Không có dữ liệu'}\n\n⚖ Tuổi xung khắc\n\nXung ngày: ${xungNgay.length ? xungNgay.join(', ') : 'Không có dữ liệu'}\nXung tháng: ${xungThang.length ? xungThang.join(', ') : 'Không có dữ liệu'}\n\n💠 Ngọc hạp thông thư\n\nSao tốt:\n${nhap.good.length ? nhap.good.map(g => `${g.sao}: ${g.note}`).join('\\n') : 'Không có dữ liệu'}\n\nSao xấu:\n${nhap.bad.length ? nhap.bad.map(b => `${b.sao}: ${b.note}`).join('\\n') : 'Không có dữ liệu'}\n\n🧭 Xuất hành\n\nHỷ thần: ${hy ? `${hy} (tốt)` : 'Không có dữ liệu'}\nTài thần: ${tai ? `${tai} (tốt)` : 'Không có dữ liệu'}\n\nNgày xuất hành theo Khổng Minh:\n${km.ten ? `${km.ten} (${km.danhGia === 'TỐT' ? 'Tốt' : 'Xấu'}) – ${km.moTa}` : 'Không có dữ liệu'}\n\n⏳ Giờ xuất hành theo Lý Thuần Phong\n\nXấu: ${ltp.xau.length ? ltp.xau.join(', ') : 'Không có dữ liệu'}\nTốt: ${ltp.tot.length ? ltp.tot.join(', ') : 'Không có dữ liệu'}\n`.replace(/[ \\t]+\\n/g, '\\n').trim();\n\nreturn [{ json: { text } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1088,2016],"id":"31f9b1ba-3cb1-4909-83f7-fd358b0889d7","name":"chitiet"},{"parameters":{"jsCode":"function decodeHtmlEntities(str) {\n  if (!str) return '';\n  str = str.replace(/&#(\\d+);/g, (_, code) => String.fromCharCode(parseInt(code, 10)));\n  str = str.replace(/&#x([0-9a-fA-F]+);/g, (_, code) => String.fromCharCode(parseInt(code, 16)));\n  const map = { '&nbsp;': ' ', '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"', '&apos;': \"'\" };\n  return str.replace(/&[a-zA-Z]+;/g, m => map[m] || m);\n}\n\nfunction stripTags(str) {\n  return decodeHtmlEntities(String(str || '')\n    .replace(/<br\\s*\\/?>/gi, '\\n')\n    .replace(/<[^>]*>/g, ''))\n    .replace(/\\u00A0/g, ' ')\n    .trim();\n}\n\n// Lấy bảng <table class=\"table1\"> đầu tiên trong HTML\nfunction firstTable1(html) {\n  const m = html.match(/<table[^>]*class=\"[^\"]*\\btable1\\b[^\"]*\"[^>]*>[\\s\\S]*?<\\/\\s*table\\s*>/i);\n  return m ? m[0] : '';\n}\n\n// Bắt giá trị theo nhãn bên trái trong cùng một <tr>\nfunction textAfter(label, htmlScope) {\n  const re = new RegExp(\n    `<tr>\\\\s*<td[^>]*>\\\\s*${label}\\\\s*<\\\\/\\\\s*td\\\\s*>\\\\s*<td[^>]*>([\\\\s\\\\S]*?)<\\\\/\\\\s*td\\\\s*>\\\\s*<\\\\/\\\\s*tr\\\\s*>`,\n    'i'\n  );\n  const m = htmlScope.match(re);\n  return m ? stripTags(m[1]) : '';\n}\n\n// ---------- BẮT ĐẦU ----------\n\nconst html = String(items?.[0]?.json?.data || '');\n\n// Lấy bảng đầu (thông tin ngày tháng…)\nconst infoTable = firstTable1(html);\n\n// Các trường trong bảng đầu\nconst duongLich = textAfter('Dương lịch', infoTable);\nconst amLich    = textAfter('Âm lịch', infoTable).replace(/\\s+/g, ' ').trim();\nconst canChi    = textAfter('Can chi', infoTable);\nconst nguHanh   = textAfter('Ngũ hành', infoTable);\nconst loaiNgay  = textAfter('Ngày', infoTable);\nconst tietKhi   = stripTags(\n  (infoTable.match(/Tiết Khí[\\s\\S]*?<td[^>]*>([\\s\\S]*?)<\\/\\s*td\\s*>/i)?.[1]) || ''\n);\n\n// ---------- KẾT QUẢ ----------\nconst text =\n`\n• Dương lịch: ${duongLich || ''}\n• Âm lịch: ${amLich || ''}\n• Can chi: ${canChi || ''}\n• Ngũ hành: ${nguHanh || ''}\n• Ngày: ${loaiNgay || ''}\n• Tiết khí: ${tietKhi || ''}\nCác mục chi tiết: Giờ hoàng đạo / hắc đạo, Ngũ hành (trạch nhật), Trực ngày, Tuổi xung khắc, Ngọc hạp thông thư (sao tốt, sao xấu), Xuất hành, Xuất hành theo Khổng Minh, Giờ xuất hành theo Lý Thuần Phong\n`.replace(/[ \\t]+\\n/g, '\\n').trim();\n\nreturn [{ json: { text } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1072,2176],"id":"dd57d92b-2be4-459c-8545-a58f012c280b","name":"ngaythang"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"75e7b36f-3fc3-459d-a807-1e83af718c98","leftValue":"={{ $('Start').item.json.chitiet }}","rightValue":"0","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[816,2160],"id":"c74776c1-d0bc-4984-af3f-bfd6d20ff49b","name":"If4"},{"parameters":{"jsCode":"function parseDate(input) {\n  input = input.toLowerCase()\n    .replace(/ngày/g, '')\n    .replace(/tháng/g, '')\n    .replace(/năm/g, '')\n    .replace(/[^0-9a-zA-Z/:\\-,. ]/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n\n  let date;\n  try {\n    date = new Date(input);\n    if (!isNaN(date)) return formatDate(date);\n  } catch (e) {}\n\n  const parts = input.match(/(\\d{1,2})[^\\d]+(\\d{1,2})[^\\d]+(\\d{4})/);\n  if (parts && parts.length === 4) {\n    const day = parseInt(parts[1], 10);\n    const month = parseInt(parts[2], 10) - 1;\n    const year = parseInt(parts[3], 10);\n    date = new Date(year, month, day);\n    if (!isNaN(date)) return formatDate(date);\n  }\n\n  return 'Invalid date';\n}\n\nfunction formatDate(date) {\n  const dd = ('0' + date.getDate()).slice(-2);\n  const mm = ('0' + (date.getMonth() + 1)).slice(-2);\n  const yyyy = date.getFullYear();\n  return `${dd}-${mm}-${yyyy}`;\n}\n\n// Duyệt qua tất cả item\nreturn items.map(item => {\n  const raw = item.json.vannien || '';\n  const formatted = parseDate(raw);\n\n  return {\n    json: {\n      ...item.json,\n      vannien: formatted   // hoặc ghi đè: vannien: formatted\n    }\n  };\n});\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[464,2128],"id":"a26bb975-7c43-42ee-b59f-e37362581d20","name":"Code14"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Start').item.json.districts }}","rightValue":"0","operator":{"type":"string","operation":"equals"},"id":"10339d33-0194-4950-85c9-dab85a268f81"}],"combinator":"and"},"renameOutput":true,"outputKey":"khong"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"4bf1f2eb-5836-44f8-b326-349f4fb53b0f","leftValue":"={{ $('Start').item.json.districts }}","rightValue":"0","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"co"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[352,1216],"id":"9b4779e9-0f21-49e3-b1bd-f203fc85738d","name":"huyen"},{"parameters":{"operation":"extractHtmlContent","extractionValues":{"values":[{"key":"huyen","cssSelector":".weather-city-inner li a","returnArray":true},{"key":"href","cssSelector":".weather-city-inner li a","returnValue":"attribute","attribute":"href","returnArray":true}]},"options":{}},"type":"n8n-nodes-base.html","typeVersion":1.2,"position":[1216,1456],"id":"516cca59-b41e-47d7-bff3-2288c80625ad","name":"HTML1"},{"parameters":{"jsCode":"const names = $json.huyen || [];\nconst hrefs = $json.href || [];\nconst out = [];\n// 1. Tạo một Set để theo dõi các mục đã xuất hiện\nconst seen = new Set();\n\nfor (let i = 0; i < Math.min(names.length, hrefs.length); i++) {\n  const n = (names[i] || '').trim();\n  const h = hrefs[i] || '';\n\n  // Bỏ qua các mục không cần thiết\n  if (n.toLowerCase() === 'home' || n.toLowerCase() === 'forums') {\n    continue;\n  }\n\n  // 2. Tạo một khóa duy nhất từ tên và href\n  const uniqueKey = `${n}|${h}`;\n\n  // 3. Chỉ thêm vào kết quả nếu khóa này chưa tồn tại trong Set\n  if (!seen.has(uniqueKey)) {\n    // 4. Đánh dấu là đã thấy và thêm vào mảng kết quả\n    seen.add(uniqueKey);\n    out.push({ json: { name: n, href: h } });\n  }\n}\n\nreturn out;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1376,1456],"id":"e4040e6b-64ef-4aff-9199-faa4d11745a2","name":"Code15"},{"parameters":{"url":"={{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept-Language","value":"vi"},{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1344,1280],"id":"63dfea8f-6644-46b8-9095-139db0296332","name":"quanhuyen1"},{"parameters":{"operation":"executeQuery","query":"DO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1\n    FROM weather\n    WHERE LOWER(tinh) = LOWER('{{$(\"Start\").first().json.provinces}}')\n      AND LOWER(huyen) = LOWER('{{$(\"Start\").first().json.districts}}')\n  ) THEN\n    RAISE EXCEPTION '❌ Không tìm thấy dữ liệu';\n  END IF;\nEND $$;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[560,1360],"id":"1c073896-6354-476a-adf3-4d01a7b04038","name":"Execute a SQL query1","retryOnFail":false,"maxTries":2,"waitBetweenTries":10,"alwaysOutputData":false,"credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}},"onError":"continueErrorOutput"},{"parameters":{"operation":"executeQuery","query":"SELECT *\nFROM weather\nWHERE LOWER(tinh) = LOWER('{{$(\"Start\").first().json.provinces}}')\n  AND LOWER(huyen) = LOWER('{{$(\"Start\").first().json.districts}}');","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[576,1120],"id":"f38e32fa-91f4-42c1-b56e-617f1fe6e1da","name":"Execute a SQL query2","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"url":"=https://dbtt.edu.vn{{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept-Language","value":"vi"},{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1040,1456],"id":"7b713c8d-fa78-4144-b387-f1538a7c885f","name":"tinhthanhpho5"},{"parameters":{"operation":"executeQuery","query":"SELECT *\nFROM weather\nWHERE LOWER(tinh) = LOWER('{{$(\"Start\").first().json.provinces}}')\n  AND LOWER(huyen) = LOWER('0');","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[864,1456],"id":"c932ba3a-c90d-4fc1-9644-231a3cf2631a","name":"Execute a SQL query3","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1600,1440],"id":"9f46ef6a-4bce-4bb7-84e8-ee68ca056767","name":"Loop Over Items"},{"parameters":{},"type":"n8n-nodes-base.noOp","name":"Replace Me","typeVersion":1,"position":[2048,1456],"id":"e12df840-2bf1-4bb9-b257-00d49a02cc87"},{"parameters":{"operation":"upsert","schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"weather","mode":"list","cachedResultName":"weather"},"columns":{"mappingMode":"defineBelow","value":{"tinh":"={{ $('Execute a SQL query3').item.json.tinh }}","huyen":"={{ $('Code15').item.json.name }}","url":"={{ $('Code15').item.json.href }}"},"matchingColumns":["tinh","huyen"],"schema":[{"id":"tinh","displayName":"tinh","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"huyen","displayName":"huyen","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"url","displayName":"url","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1824,1456],"id":"bfe5a0bc-1e79-4ad2-a09b-ec3241eea604","name":"Insert or update rows in a table","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT *\nFROM weather\nWHERE LOWER(tinh) = LOWER('{{$(\"Start\").first().json.provinces}}')\n  AND LOWER(huyen) = LOWER('{{$(\"Start\").first().json.districts}}');","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[864,1280],"id":"52a03c4f-b909-4343-bf2c-f384b3a6b47b","name":"Execute a SQL query4","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT *\nFROM weather\nWHERE LOWER(tinh) = LOWER('{{$(\"Start\").first().json.provinces}}')\n  AND LOWER(huyen) = LOWER('{{$(\"Start\").first().json.districts}}');","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1824,1280],"id":"39face8e-c66a-4d63-9997-c8f0dba6f869","name":"Execute a SQL query6","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"url":"={{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept-Language","value":"vi"},{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2048,1280],"id":"7293235a-83dd-4648-8e4a-166f83959d04","name":"quanhuyen2"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"thời tiết hiện tại\": lineHienTai,\n        \"dự báo theo ngày\": lineNgay,\n        \"dự báo theo giờ\": lineGio,\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2224,1280],"id":"d4540b1f-39e9-4aae-b7d4-1d88f502bd87","name":"Code16"}],"connections":{"Start":{"main":[[{"node":"Switch1","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Code1","type":"main","index":0}],[{"node":"Code2","type":"main","index":0}],[{"node":"Code3","type":"main","index":0}]]},"phat-nguoi":{"main":[[{"node":"Code","type":"main","index":0}]]},"xo-so":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Code5":{"main":[[{"node":"If Erro","type":"main","index":0}]]},"Switch1":{"main":[[{"node":"phat-nguoi","type":"main","index":0}],[{"node":"xo-so","type":"main","index":0}],[{"node":"Find URL Captcha","type":"main","index":0}],[{"node":"huyen","type":"main","index":0}],[{"node":"HTTP Request1","type":"main","index":0}],[{"node":"Code14","type":"main","index":0}]]},"Get File Captcha":{"main":[[{"node":"Text Captcha","type":"main","index":0}]]},"Text Captcha":{"main":[[{"node":"POST Payload","type":"main","index":0}]]},"POST Payload":{"main":[[{"node":"Code5","type":"main","index":0}]]},"Find URL Captcha":{"main":[[{"node":"Find Get Headers","type":"main","index":0}]]},"Find Get Headers":{"main":[[{"node":"Get File Captcha","type":"main","index":0}]]},"If Erro":{"main":[[],[{"node":"Retry Max 5","type":"main","index":0}]]},"Retry Max 5":{"main":[[{"node":"Find URL Captcha","type":"main","index":0}]]},"tinhthanhpho":{"main":[[{"node":"Code9","type":"main","index":0}]]},"HTTP Request1":{"main":[[{"node":"10video","type":"main","index":0}]]},"Code13":{"main":[[]]},"vannien":{"main":[[{"node":"If4","type":"main","index":0}]]},"If4":{"main":[[{"node":"chitiet","type":"main","index":0}],[{"node":"ngaythang","type":"main","index":0}]]},"Code14":{"main":[[{"node":"vannien","type":"main","index":0}]]},"huyen":{"main":[[{"node":"Execute a SQL query2","type":"main","index":0}],[{"node":"Execute a SQL query1","type":"main","index":0}]]},"HTML1":{"main":[[{"node":"Code15","type":"main","index":0}]]},"Code15":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Execute a SQL query1":{"main":[[{"node":"Execute a SQL query4","type":"main","index":0}],[{"node":"Execute a SQL query3","type":"main","index":0}]]},"Execute a SQL query2":{"main":[[{"node":"tinhthanhpho","type":"main","index":0}]]},"tinhthanhpho5":{"main":[[{"node":"HTML1","type":"main","index":0}]]},"Execute a SQL query3":{"main":[[{"node":"tinhthanhpho5","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"Execute a SQL query6","type":"main","index":0}],[{"node":"Insert or update rows in a table","type":"main","index":0}]]},"Replace Me":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Insert or update rows in a table":{"main":[[{"node":"Replace Me","type":"main","index":0}]]},"Execute a SQL query4":{"main":[[{"node":"quanhuyen1","type":"main","index":0}]]},"quanhuyen1":{"main":[[{"node":"Code10","type":"main","index":0}]]},"Execute a SQL query6":{"main":[[{"node":"quanhuyen2","type":"main","index":0}]]},"quanhuyen2":{"main":[[{"node":"Code16","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"8c640fbe-25c5-4bda-8ff3-fe3b777c4e4f","triggerCount":0,"shared":[{"createdAt":"2025-08-03T13:06:59.764Z","updatedAt":"2025-08-03T13:06:59.764Z","role":"workflow:owner","workflowId":"iCtDSe7X2aEUr8nc","projectId":"Bsx4kBdHQHZGGC5J"}],"tags":[]}