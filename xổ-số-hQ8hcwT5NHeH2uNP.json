{"createdAt":"2025-08-25T13:55:28.636Z","updatedAt":"2025-09-14T17:08:45.119Z","id":"hQ8hcwT5NHeH2uNP","name":"xổ số","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"khuvuc","type":"any"},{"name":"date","type":"any"}]}},"id":"6ab705e5-2e90-468d-a6cf-5f6e7379ec01","typeVersion":1.1,"name":"Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[-464,192]},{"parameters":{"jsCode":"// Kiểm tra cấu trúc dữ liệu đầu vào\nlet htmlContent = \"\";\n\nif (!items || !Array.isArray(items) || items.length === 0) {\n  return { json: { error: true, message: \"Dữ liệu đầu vào không hợp lệ hoặc rỗng\" } };\n}\n\nconst inputData = items[0];\nif (typeof inputData === \"object\") {\n  htmlContent =\n    inputData.data ??\n    (inputData.json && inputData.json.data) ??\n    inputData.body ??\n    inputData.content ??\n    inputData.html ??\n    \"\";\n} else if (typeof inputData === \"string\") {\n  htmlContent = inputData;\n}\n\nif (!htmlContent) {\n  return { json: { error: true, message: \"Không thể tìm thấy dữ liệu HTML\" } };\n}\n\nfunction pick(re, text = htmlContent) {\n  const m = text.match(re);\n  return m ? m[1].trim() : null;\n}\n\nfunction pickAll(re, text = htmlContent) {\n  const out = [];\n  let m;\n  while ((m = re.exec(text)) !== null) out.push(m[1].trim());\n  return out;\n}\n\nconst result = {};\n\ntry {\n  // Bóc theo ID (ổn định hơn nhiều so với dò <td>…</td>)\n  result.giai_db   = pick(/id=mb_prize_DB_item_0[^>]*>([^<]+)/i);\n  result.giai_nhat = pick(/id=mb_prize_1_item_0[^>]*>([^<]+)/i);\n\n  result.giai_nhi  = pickAll(/id=mb_prize_2_item_(?:0|1)[^>]*>([^<]+)/gi).join(\" \");\n  result.giai_ba   = pickAll(/id=mb_prize_3_item_(?:0|1|2|3|4|5)[^>]*>([^<]+)/gi).join(\" \");\n  result.giai_tu   = pickAll(/id=mb_prize_4_item_(?:0|1|2|3)[^>]*>([^<]+)/gi).join(\" \");\n  result.giai_nam  = pickAll(/id=mb_prize_5_item_(?:0|1|2|3|4|5)[^>]*>([^<]+)/gi).join(\" \");\n  result.giai_sau  = pickAll(/id=mb_prize_6_item_(?:0|1|2)[^>]*>([^<]+)/gi).join(\" \");\n  result.giai_bay  = pickAll(/id=mb_prize_7_item_(?:0|1|2|3)[^>]*>([^<]+)/gi).join(\" \");\n\n  // Lô tô: bắt tất cả id=loto_mb_X\n  const lotoPairs = pickAll(/id=loto_mb_([0-9])[^>]*>([^<]+)/gi); // <- cần 2 nhóm, nên ta dùng exec thủ công\n  // Viết lại để giữ cả 2 nhóm (đầu, chuỗi số)\n  const loto = {};\n  let mm;\n  const reLoto = /id=loto_mb_([0-9])[^>]*>([^<]+)/gi;\n  while ((mm = reLoto.exec(htmlContent)) !== null) {\n    const head = mm[1];\n    const content = mm[2].trim();\n    loto[head] = content;\n  }\n  result.loto = loto;\n\n} catch (error) {\n  return { json: { error: true, message: `Lỗi khi xử lý dữ liệu: ${error.message}` } };\n}\n\nreturn { json: { success: true, data: result } };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[256,64],"id":"8d7d4d07-440e-4672-a0ab-b0fa0f596e58","name":"Code1","onError":"continueRegularOutput"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Start').item.json.khuvuc }}","rightValue":"xsmb","operator":{"type":"string","operation":"equals"},"id":"afc68c52-279c-48f3-a8ec-f838b1299bc1"}],"combinator":"and"},"renameOutput":true,"outputKey":"xsmb"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"858fe1e9-7df3-40e6-b16b-3d59e8bbb9d0","leftValue":"={{ $('Start').item.json.khuvuc }}","rightValue":"xsmn","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"xsmn"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"188bde00-8f42-4570-9197-a683cd5d7782","leftValue":"={{ $('Start').item.json.khuvuc }}","rightValue":"xsmt","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"xsmt"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-128,176],"id":"2b536c5f-917a-4809-af9a-49c7894b7114","name":"Switch","onError":"continueRegularOutput"},{"parameters":{"jsCode":"// ========== XSMN (Miền Nam) ==========\n// Helpers\nfunction cleanText(text) {\n  if (!text) return '';\n  return text.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n}\nfunction pick(re, html) {\n  const m = html.match(re);\n  return m ? m[1].trim() : '';\n}\nfunction pickAll(re, html) {\n  const out = [];\n  let m;\n  while ((m = re.exec(html)) !== null) out.push(m[1].trim());\n  return out;\n}\n\n// Input\nconst inputJson = items[0].json;\nlet html = '';\nif (Array.isArray(inputJson) && inputJson[0]?.data) html = inputJson[0].data;\nelse if (inputJson?.data) html = inputJson.data;\nif (!html) throw new Error(\"Không tìm thấy chuỗi HTML trong items[0].json.data\");\n\n// Map mã đài → tên tỉnh (Miền Nam)\nconst CODE_TO_NAME_XSMN = {\n  tp: \"TP.HCM\", hcm: \"TP.HCM\", tphcm: \"TP.HCM\",\n  la: \"Long An\", bp: \"Bình Phước\", bd: \"Bình Dương\", bt: \"Bến Tre\",\n  tg: \"Tiền Giang\", tv: \"Trà Vinh\", vl: \"Vĩnh Long\", st: \"Sóc Trăng\",\n  dn: \"Đồng Nai\", dt: \"Đồng Tháp\", cm: \"Cà Mau\", ag: \"An Giang\",\n  bl: \"Bạc Liêu\", kg: \"Kiên Giang\", ct: \"Cần Thơ\", tn: \"Tây Ninh\",\n  vt: \"Bà Rịa - Vũng Tàu\", dl: \"Đà Lạt\" // (Đà Lạt: đài Lâm Đồng)\n};\nconst norm = s => String(s||'').trim().toLowerCase();\nconst toProvNameMN = code => CODE_TO_NAME_XSMN[norm(code)] || String(code||'').toUpperCase();\n\n// 1) Parse bảng chính (table-xsmn)\nconst ketQuaXoSo = {};\nconst tableMatch = html.match(/<table[^>]*class=\"[^\"]*\\btable-xsmn\\b[^\"]*\"[^>]*>([\\s\\S]*?)<\\/table>/i);\nif (tableMatch) {\n  const tableHtml = tableMatch[1];\n\n  // Provinces từ thead\n  const thead = tableHtml.match(/<thead[^>]*>([\\s\\S]*?)<\\/thead>/i)?.[1] || '';\n  const provinces = [];\n  let thm, idx = 0;\n  const thRe = /<th[^>]*>([\\s\\S]*?)<\\/th>/gi;\n  while ((thm = thRe.exec(thead)) !== null) {\n    if (idx++ === 0) continue; // cột \"Giải\"\n    const name = cleanText(thm[1]);\n    if (name) {\n      provinces.push(name);\n      ketQuaXoSo[name] = {};\n    }\n  }\n\n  // Rows\n  const tbody = tableHtml.match(/<tbody[^>]*>([\\s\\S]*?)<\\/tbody>/i)?.[1] || '';\n  const trRe = /<tr[^>]*>([\\s\\S]*?)<\\/tr>/gi;\n  let trm;\n  while ((trm = trRe.exec(tbody)) !== null) {\n    const rowHtml = trm[1];\n\n    // Lấy cells, cho phép thiếu </td>\n    const cells = [];\n    const tdRe = /<td[^>]*>([\\s\\S]*?)(?=<td|\\<\\/tr>)/gi;\n    let tdm;\n    while ((tdm = tdRe.exec(rowHtml)) !== null) cells.push(tdm[1]);\n    if (!cells.length) continue;\n\n    const prizeName = cleanText(cells[0]); // \"Giải Tám\"...\"G.ĐB\"\n    for (let i = 1; i < cells.length && i <= provinces.length; i++) {\n      const prov = provinces[i - 1];\n      const spans = [...cells[i].matchAll(/<span[^>]*>([\\s\\S]*?)<\\/span>/gi)].map(m => cleanText(m[1]));\n      const nums = spans.length ? spans.flatMap(s => s.split(/\\s+/)).filter(Boolean)\n                                : cleanText(cells[i]).split(/[,\\s]+/).filter(Boolean);\n      ketQuaXoSo[prov][prizeName] = nums;\n    }\n  }\n}\n\n// 2) Fallback theo id (mã đài)\n(function fallbackById() {\n  // Tìm mã đài theo id=xx_prize_DB_item_0\n  const codes = new Set();\n  let m;\n  const codeRe = /id=([a-z]{2,3})_prize_DB_item_0/gi;\n  while ((m = codeRe.exec(html)) !== null) codes.add(m[1]);\n\n  if (!codes.size) return;\n\n  for (const code of codes) {\n    const provName = toProvNameMN(code);\n    const data = {\n      giai_db: pick(new RegExp(`id=${code}_prize_DB_item_0[^>]*>([^<]+)`,'i'), html),\n      giai_1 : pick(new RegExp(`id=${code}_prize_1_item_0[^>]*>([^<]+)`,'i'), html),\n      giai_2 : pickAll(new RegExp(`id=${code}_prize_2_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_3 : pickAll(new RegExp(`id=${code}_prize_3_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_4 : pickAll(new RegExp(`id=${code}_prize_4_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_5 : pickAll(new RegExp(`id=${code}_prize_5_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_6 : pickAll(new RegExp(`id=${code}_prize_6_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_7 : pickAll(new RegExp(`id=${code}_prize_7_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_8 : pick(new RegExp(`id=${code}_prize_8_item_0[^>]*>([^<]+)`,'i'), html), // MN có G8\n    };\n\n    if (!ketQuaXoSo[provName]) ketQuaXoSo[provName] = {};\n    Object.assign(ketQuaXoSo[provName], data);\n  }\n})();\n\n// 3) Lô tô\nconst loto = {};\nconst lotoContainerMatch = html.match(/<div[^>]*class=\"[^\"]*\\bview-loto\\b[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/i);\nif (lotoContainerMatch) {\n  const parts = lotoContainerMatch[1].split('<p class=\"padding10\">').slice(1);\n  for (const part of parts) {\n    const title = part.match(/Loto\\s+(.+?)\\s+Thứ/i)?.[1]?.trim();\n    if (!title) continue;\n    const rows = {};\n    const rowRe = /<td[^>]*class=\"text-center\"[^>]*>(\\d+|-)<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/gi;\n    let rm;\n    while ((rm = rowRe.exec(part)) !== null) {\n      if (rm[1] === '-') continue;\n      rows[rm[1]] = cleanText(rm[2]).split(/[,\\s]+/).filter(Boolean);\n    }\n    if (Object.keys(rows).length) loto[title] = rows;\n  }\n} else {\n  // Fallback theo id=loto_<code>_<digit>\n  let lm;\n  const reLotoLine = /id=loto_([a-z]{2,3})_(\\d)[^>]*>([^<]+)/gi;\n  while ((lm = reLotoLine.exec(html)) !== null) {\n    const code = lm[1], head = lm[2], val = lm[3];\n    const prov = toProvNameMN(code);\n    if (!loto[prov]) loto[prov] = {};\n    loto[prov][head] = val.trim() === '-' ? [] : val.trim().split(/[,\\s]+/).filter(Boolean);\n  }\n}\n\n// Output\nreturn [{ json: { ketQuaXoSo, loto } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[256,208],"id":"5f4dbcc0-91dd-4cf8-b095-ba12e24860a5","name":"Code2","onError":"continueRegularOutput"},{"parameters":{"jsCode":"// ========== XSMT (Miền Trung) ==========\n// Helpers\nfunction cleanText(text) {\n  if (!text) return '';\n  return text.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n}\nfunction pick(re, html) {\n  const m = html.match(re);\n  return m ? m[1].trim() : '';\n}\nfunction pickAll(re, html) {\n  const out = [];\n  let m;\n  while ((m = re.exec(html)) !== null) out.push(m[1].trim());\n  return out;\n}\n\n// Input\nconst inputJson = items[0].json;\nlet html = '';\nif (Array.isArray(inputJson) && inputJson[0]?.data) html = inputJson[0].data;\nelse if (inputJson?.data) html = inputJson.data;\nif (!html) throw new Error(\"Không tìm thấy chuỗi HTML trong items[0].json.data\");\n\n// Map mã đài → tên tỉnh (Miền Trung)\nconst CODE_TO_NAME_XSMT = {\n  dn: \"Đà Nẵng\", dna: \"Đà Nẵng\",\n  kh: \"Khánh Hòa\",\n  qn: \"Quảng Nam\", qna: \"Quảng Nam\",\n  qng: \"Quảng Ngãi\",\n  qt: \"Quảng Trị\",\n  qb: \"Quảng Bình\",\n  bd: \"Bình Định\",\n  py: \"Phú Yên\",\n  gl: \"Gia Lai\",\n  nt: \"Ninh Thuận\",\n  kt: \"Kon Tum\",\n  dlk: \"Đắk Lắk\", dl: \"Đắk Lắk\",\n  dno: \"Đắk Nông\",\n  tth: \"Thừa Thiên Huế\", hue: \"Thừa Thiên Huế\"\n};\nconst norm = s => String(s||'').trim().toLowerCase();\nconst toProvNameMT = code => CODE_TO_NAME_XSMT[norm(code)] || String(code||'').toUpperCase();\n\n// 1) Parse bảng chính (table-xsmt)\nconst ketQuaXoSo = {};\nconst tableMatch = html.match(/<table[^>]*class=\"[^\"]*\\btable-xsmt\\b[^\"]*\"[^>]*>([\\s\\S]*?)<\\/table>/i);\nif (tableMatch) {\n  const tableHtml = tableMatch[1];\n\n  // Provinces từ thead\n  const thead = tableHtml.match(/<thead[^>]*>([\\s\\S]*?)<\\/thead>/i)?.[1] || '';\n  const provinces = [];\n  let thm, idx = 0;\n  const thRe = /<th[^>]*>([\\s\\S]*?)<\\/th>/gi;\n  while ((thm = thRe.exec(thead)) !== null) {\n    if (idx++ === 0) continue; // cột \"Giải\"\n    const name = cleanText(thm[1]);\n    if (name) {\n      provinces.push(name);\n      ketQuaXoSo[name] = {};\n    }\n  }\n\n  // Rows\n  const tbody = tableHtml.match(/<tbody[^>]*>([\\s\\S]*?)<\\/tbody>/i)?.[1] || '';\n  const trRe = /<tr[^>]*>([\\s\\S]*?)<\\/tr>/gi;\n  let trm;\n  while ((trm = trRe.exec(tbody)) !== null) {\n    const rowHtml = trm[1];\n\n    // Lấy cells, cho phép thiếu </td>\n    const cells = [];\n    const tdRe = /<td[^>]*>([\\s\\S]*?)(?=<td|\\<\\/tr>)/gi;\n    let tdm;\n    while ((tdm = tdRe.exec(rowHtml)) !== null) cells.push(tdm[1]);\n    if (!cells.length) continue;\n\n    const prizeName = cleanText(cells[0]); // \"Giải Tám\"...\"G.ĐB\"\n    for (let i = 1; i < cells.length && i <= provinces.length; i++) {\n      const prov = provinces[i - 1];\n      const spans = [...cells[i].matchAll(/<span[^>]*>([\\s\\S]*?)<\\/span>/gi)].map(m => cleanText(m[1]));\n      const nums = spans.length ? spans.flatMap(s => s.split(/\\s+/)).filter(Boolean)\n                                : cleanText(cells[i]).split(/[,\\s]+/).filter(Boolean);\n      ketQuaXoSo[prov][prizeName] = nums;\n    }\n  }\n}\n\n// 2) Fallback theo id (mã đài)\n(function fallbackById() {\n  const codes = new Set();\n  let m;\n  const codeRe = /id=([a-z]{2,3})_prize_DB_item_0/gi;\n  while ((m = codeRe.exec(html)) !== null) codes.add(m[1]);\n\n  if (!codes.size) return;\n\n  for (const code of codes) {\n    const provName = toProvNameMT(code);\n    const data = {\n      giai_db: pick(new RegExp(`id=${code}_prize_DB_item_0[^>]*>([^<]+)`,'i'), html),\n      giai_1 : pick(new RegExp(`id=${code}_prize_1_item_0[^>]*>([^<]+)`,'i'), html),\n      giai_2 : pickAll(new RegExp(`id=${code}_prize_2_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_3 : pickAll(new RegExp(`id=${code}_prize_3_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_4 : pickAll(new RegExp(`id=${code}_prize_4_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_5 : pickAll(new RegExp(`id=${code}_prize_5_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_6 : pickAll(new RegExp(`id=${code}_prize_6_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_7 : pickAll(new RegExp(`id=${code}_prize_7_item_\\\\d+[^>]*>([^<]+)`,'gi'), html),\n      giai_8 : pick(new RegExp(`id=${code}_prize_8_item_0[^>]*>([^<]+)`,'i'), html), // MT có G8\n    };\n\n    if (!ketQuaXoSo[provName]) ketQuaXoSo[provName] = {};\n    Object.assign(ketQuaXoSo[provName], data);\n  }\n})();\n\n// 3) Lô tô\nconst loto = {};\nconst lotoContainerMatch = html.match(/<div[^>]*class=\"[^\"]*\\bview-loto\\b[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/i);\nif (lotoContainerMatch) {\n  const parts = lotoContainerMatch[1].split('<p class=\"padding10\">').slice(1);\n  for (const part of parts) {\n    const title = part.match(/Loto\\s+(.+?)\\s+Thứ/i)?.[1]?.trim();\n    if (!title) continue;\n    const rows = {};\n    const rowRe = /<td[^>]*class=\"text-center\"[^>]*>(\\d+|-)<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/gi;\n    let rm;\n    while ((rm = rowRe.exec(part)) !== null) {\n      if (rm[1] === '-') continue;\n      rows[rm[1]] = cleanText(rm[2]).split(/[,\\s]+/).filter(Boolean);\n    }\n    if (Object.keys(rows).length) loto[title] = rows;\n  }\n} else {\n  // Fallback theo id=loto_<code>_<digit>\n  let lm;\n  const reLotoLine = /id=loto_([a-z]{2,3})_(\\d)[^>]*>([^<]+)/gi;\n  while ((lm = reLotoLine.exec(html)) !== null) {\n    const code = lm[1], head = lm[2], val = lm[3];\n    const prov = toProvNameMT(code);\n    if (!loto[prov]) loto[prov] = {};\n    loto[prov][head] = val.trim() === '-' ? [] : val.trim().split(/[,\\s]+/).filter(Boolean);\n  }\n}\n\n// Output\nreturn [{ json: { ketQuaXoSo, loto } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-112,384],"id":"925abad2-d4ef-4980-b2e4-e40cd9b55211","name":"Code3","onError":"continueRegularOutput"},{"parameters":{"url":"=https://xosodaiphat.com/{{ $json.khuvuc }}-{{ $json.date }}.html ","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"},{"name":"Accept-Language","value":"vi"},{"name":"Accept-Encoding","value":"gzip, deflate, br, zstd"},{"name":"Upgrade-Insecure-Requests","value":"1"},{"name":"Sec-Fetch-Dest","value":"document"},{"name":"Sec-Fetch-Mode","value":"navigate"},{"name":"Sec-Fetch-Site","value":"none"},{"name":"Sec-Fetch-User","value":"?1"},{"name":"Priority","value":"u=0, i"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-304,192],"id":"9f9b5775-c711-4260-93e8-852a5bca7892","name":"xo-so","retryOnFail":true,"onError":"continueRegularOutput"},{"parameters":{"jsCode":"// Kiểm tra cấu trúc dữ liệu đầu vào\nlet htmlContent = \"\";\n\n// Kiểm tra xem items có tồn tại không\nif (!items || !Array.isArray(items) || items.length === 0) {\n  return {\n    json: {\n      error: true,\n      message: \"Dữ liệu đầu vào không hợp lệ hoặc rỗng\"\n    }\n  };\n}\n\n// Kiểm tra cấu trúc của items[0]\nconst inputData = items[0];\nif (typeof inputData === 'object') {\n  // Thử lấy dữ liệu từ các thuộc tính phổ biến\n  if (inputData.data) {\n    htmlContent = inputData.data;\n  } else if (inputData.json && inputData.json.data) {\n    htmlContent = inputData.json.data;\n  } else if (inputData.body) {\n    htmlContent = inputData.body;\n  } else if (inputData.content) {\n    htmlContent = inputData.content;\n  } else if (inputData.html) {\n    htmlContent = inputData.html;\n  }\n} else if (typeof inputData === 'string') {\n  htmlContent = inputData;\n}\n\n// Kiểm tra xem chúng ta đã có HTML chưa\nif (!htmlContent) {\n  return {\n    json: {\n      error: true,\n      message: \"Không thể tìm thấy dữ liệu HTML\"\n    }\n  };\n}\n\nconst result = {};\n\ntry {\n  // Trích xuất giải đặc biệt (G.ĐB)\n  const gdbMatch = htmlContent.match(/<td>G\\.ĐB<\\/td>\\s*<td[^>]*>\\s*<span[^>]*>([^<]+)<\\/span>/);\n  result.giai_db = gdbMatch ? gdbMatch[1].trim() : null;\n\n  // Trích xuất giải nhất (G.1)\n  const g1Match = htmlContent.match(/<td>G\\.1<\\/td>\\s*<td[^>]*>\\s*<span[^>]*>([^<]+)<\\/span>/);\n  result.giai_nhat = g1Match ? g1Match[1].trim() : null;\n\n  // Trích xuất giải nhì (G.2)\n  const g2Match = htmlContent.match(/<td>G\\.2<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g2Match) {\n    const g2Numbers = g2Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g2Numbers) {\n      result.giai_nhi = g2Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất giải ba (G.3)\n  const g3Match = htmlContent.match(/<td>G\\.3<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g3Match) {\n    const g3Numbers = g3Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g3Numbers) {\n      result.giai_ba = g3Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất giải tư (G.4)\n  const g4Match = htmlContent.match(/<td>G\\.4<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g4Match) {\n    const g4Numbers = g4Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g4Numbers) {\n      result.giai_tu = g4Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất giải năm (G.5)\n  const g5Match = htmlContent.match(/<td>G\\.5<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g5Match) {\n    const g5Numbers = g5Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g5Numbers) {\n      result.giai_nam = g5Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất giải sáu (G.6)\n  const g6Match = htmlContent.match(/<td>G\\.6<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g6Match) {\n    const g6Numbers = g6Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g6Numbers) {\n      result.giai_sau = g6Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất giải bảy (G.7)\n  const g7Match = htmlContent.match(/<td>G\\.7<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>/);\n  if (g7Match) {\n    const g7Numbers = g7Match[1].match(/<span[^>]*>([^<]+)<\\/span>/g);\n    if (g7Numbers) {\n      result.giai_bay = g7Numbers.map(span => span.replace(/<[^>]*>/g, '').trim()).join(' ');\n    }\n  }\n\n  // Trích xuất bảng loto\n  const lotoMatch = htmlContent.match(/<span class=\"link-pad-left padding10\">Loto miền Bắc<\\/span>[\\s\\S]*?<table[^>]*>([\\s\\S]*?)<\\/table>/);\n  if (lotoMatch) {\n    const lotoRows = lotoMatch[1].match(/<tr>\\s*<td[^>]*>(\\d+)<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>\\s*<\\/tr>/g);\n    if (lotoRows) {\n      result.loto = {};\n      lotoRows.forEach(row => {\n        const match = row.match(/<tr>\\s*<td[^>]*>(\\d+)<\\/td>\\s*<td[^>]*>([\\s\\S]*?)<\\/td>\\s*<\\/tr>/);\n        if (match) {\n          const head = match[1];\n          const content = match[2].replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n          result.loto[head] = content;\n        }\n      });\n    }\n  }\n\n} catch (error) {\n  return {\n    json: {\n      error: true,\n      message: `Lỗi khi xử lý dữ liệu: ${error.message}`\n    }\n  };\n}\n\n// Trả về kết quả\nreturn {\n  json: {\n    success: true,\n    data: result\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[656,48],"id":"5b0a5afe-c9bc-45d3-a05d-c68fb2b1fad3","name":"Code8","onError":"continueRegularOutput"},{"parameters":{"jsCode":"// --- CÁC HÀM HỖ TRỢ ---\n// Hàm để dọn dẹp văn bản lấy từ HTML (xóa thẻ HTML, khoảng trắng thừa)\nfunction cleanText(text) {\n    if (!text) return '';\n    return text.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n}\n\n// --- LOGIC CHÍNH ---\n\n// Lấy dữ liệu JSON từ item đầu tiên n8n đưa vào\nconst inputJson = items[0].json;\n\n// Lấy chuỗi HTML. Dữ liệu có thể là một object { \"data\": \"...\" }\n// hoặc một mảng chứa object đó [{ \"data\": \"...\" }]. Code này xử lý cả hai.\nlet html = '';\nif (Array.isArray(inputJson) && inputJson[0] && inputJson[0].data) {\n  // Trường hợp là mảng\n  html = inputJson[0].data;\n} else if (inputJson && inputJson.data) {\n  // Trường hợp là object\n  html = inputJson.data;\n}\n\n// Nếu không tìm thấy HTML thì báo lỗi\nif (!html) {\n  throw new Error(\"Không tìm thấy chuỗi HTML trong `items[0].json.data`. Vui lòng kiểm tra cấu trúc dữ liệu từ node phía trước.\");\n}\n\n\n// --- 1. TRÍCH XUẤT BẢNG KẾT QUẢ XỔ SỐ CHÍNH ---\n\nconst ketQuaXoSo = {};\n\n// Tìm bảng kết quả chính bằng regex\nconst prizeTableRegex = /<table class=\"table table-bordered table-striped table-xsmn livetn3\">([\\s\\S]*?)<\\/table>/;\nconst prizeTableMatch = html.match(prizeTableRegex);\n\nif (prizeTableMatch) {\n    const tableHtml = prizeTableMatch[1];\n\n    // Lấy tên các tỉnh từ thead\n    const theadRegex = /<thead>([\\s\\S]*?)<\\/thead>/;\n    const theadMatch = tableHtml.match(theadRegex);\n    const provinces = [];\n    if (theadMatch) {\n        const provinceHeaderRegex = /<th[^>]*>([\\s\\S]*?)<\\/th>/g;\n        let provinceMatch;\n        // Bỏ qua thẻ <th> đầu tiên (chữ \"Giải\")\n        provinceHeaderRegex.exec(theadMatch[1]); \n        while ((provinceMatch = provinceHeaderRegex.exec(theadMatch[1])) !== null) {\n            const provinceName = cleanText(provinceMatch[1]);\n            provinces.push(provinceName);\n            ketQuaXoSo[provinceName] = {};\n        }\n    }\n\n    // Lấy các giải thưởng từ tbody\n    const tbodyRegex = /<tbody>([\\s\\S]*?)<\\/tbody>/;\n    const tbodyMatch = tableHtml.match(tbodyRegex);\n    if (tbodyMatch) {\n        const rowRegex = /<tr>([\\s\\S]*?)<\\/tr>/g;\n        let rowMatch;\n        while ((rowMatch = rowRegex.exec(tbodyMatch[1])) !== null) {\n            const cellRegex = /<td[^>]*>([\\s\\S]*?)<\\/td>/g;\n            let cellMatch;\n            \n            // Ô đầu tiên là tên giải\n            cellMatch = cellRegex.exec(rowMatch[1]);\n            if (!cellMatch) continue;\n            const prizeName = cleanText(cellMatch[1]);\n\n            // Các ô tiếp theo là kết quả\n            let provinceIndex = 0;\n            while ((cellMatch = cellRegex.exec(rowMatch[1])) !== null) {\n                if (provinceIndex < provinces.length) {\n                    const provinceName = provinces[provinceIndex];\n                    const numbersRaw = cellMatch[1];\n                    const numberSpanRegex = /<span[^>]*>([\\s\\S]*?)<\\/span>/g;\n                    const numbers = [];\n                    let numberMatch;\n                    while((numberMatch = numberSpanRegex.exec(numbersRaw)) !== null) {\n                        numbers.push(...cleanText(numberMatch[1]).split(' '));\n                    }\n                    \n                    ketQuaXoSo[provinceName][prizeName] = numbers.filter(n => n); // Lọc bỏ chuỗi rỗng\n                    provinceIndex++;\n                }\n            }\n        }\n    }\n}\n\n// --- 2. TRÍCH XUẤT CÁC BẢNG LOTO ---\nconst loto = {};\nconst lotoContainerRegex = /<div class=\"block-main-content view-loto\">([\\s\\S]*?)<\\/div>/;\nconst lotoContainerMatch = html.match(lotoContainerRegex);\n\nif (lotoContainerMatch) {\n    // Tách mỗi bảng loto thành một phần riêng\n    const lotoTablesHtml = lotoContainerMatch[1].split('<p class=\"padding10\">').slice(1);\n    \n    for (const tableHtml of lotoTablesHtml) {\n        // Lấy tên tỉnh từ tiêu đề\n        const titleMatch = tableHtml.match(/Loto (.*?) Thứ/);\n        if (titleMatch && titleMatch[1]) {\n            const provinceName = titleMatch[1].trim();\n            loto[provinceName] = {};\n            \n            // Lấy các hàng của bảng loto\n            const lotoRowRegex = /<td class=\"text-center\">(\\d+|-)<\\/td>\\s*<td.*?>([\\s\\S]*?)<\\/td>/g;\n            let rowMatch;\n            while ((rowMatch = lotoRowRegex.exec(tableHtml)) !== null) {\n                const head = rowMatch[1]; // Đầu số (0, 1, 2... hoặc -)\n                if (head === '-') continue;\n\n                const numbersRaw = cleanText(rowMatch[2]); // Dãy số loto\n                \n                const numbers = numbersRaw === '-' ? [] : numbersRaw.replace(/,\\s*$/,'').split(/, | |,/g).filter(n => n);\n                loto[provinceName][head] = numbers;\n            }\n        }\n    }\n}\n\n// --- KẾT QUẢ CUỐI CÙNG ---\nreturn [{\n    json: {\n        ketQuaXoSo,\n        loto\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[656,192],"id":"ecf405d4-5df3-4a18-9ebf-c2bccdb24e16","name":"Code","onError":"continueRegularOutput"},{"parameters":{"jsCode":"// --- CÁC HÀM HỖ TRỢ ---\n// Hàm để dọn dẹp văn bản lấy từ HTML (xóa thẻ HTML, khoảng trắng thừa)\nfunction cleanText(text) {\n    if (!text) return '';\n    return text.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n}\n\n// --- LOGIC CHÍNH ---\n\n// Lấy dữ liệu JSON từ item đầu tiên n8n đưa vào\nconst inputJson = items[0].json;\n\n// Lấy chuỗi HTML. Dữ liệu có thể là một object { \"data\": \"...\" }\n// hoặc một mảng chứa object đó [{ \"data\": \"...\" }]. Code này xử lý cả hai.\nlet html = '';\nif (Array.isArray(inputJson) && inputJson[0] && inputJson[0].data) {\n  // Trường hợp là mảng\n  html = inputJson[0].data;\n} else if (inputJson && inputJson.data) {\n  // Trường hợp là object\n  html = inputJson.data;\n}\n\n// Nếu không tìm thấy HTML thì báo lỗi\nif (!html) {\n  throw new Error(\"Không tìm thấy chuỗi HTML trong `items[0].json.data`. Vui lòng kiểm tra cấu trúc dữ liệu từ node phía trước.\");\n}\n\n\n// --- 1. TRÍCH XUẤT BẢNG KẾT QUẢ XỔ SỐ CHÍNH ---\n\nconst ketQuaXoSo = {};\n\n// Tìm bảng kết quả chính bằng regex\nconst prizeTableRegex = /<table class=\"table table-bordered table-striped table-xsmn livetn3\">([\\s\\S]*?)<\\/table>/;\nconst prizeTableMatch = html.match(prizeTableRegex);\n\nif (prizeTableMatch) {\n    const tableHtml = prizeTableMatch[1];\n\n    // Lấy tên các tỉnh từ thead\n    const theadRegex = /<thead>([\\s\\S]*?)<\\/thead>/;\n    const theadMatch = tableHtml.match(theadRegex);\n    const provinces = [];\n    if (theadMatch) {\n        const provinceHeaderRegex = /<th[^>]*>([\\s\\S]*?)<\\/th>/g;\n        let provinceMatch;\n        // Bỏ qua thẻ <th> đầu tiên (chữ \"Giải\")\n        provinceHeaderRegex.exec(theadMatch[1]); \n        while ((provinceMatch = provinceHeaderRegex.exec(theadMatch[1])) !== null) {\n            const provinceName = cleanText(provinceMatch[1]);\n            provinces.push(provinceName);\n            ketQuaXoSo[provinceName] = {};\n        }\n    }\n\n    // Lấy các giải thưởng từ tbody\n    const tbodyRegex = /<tbody>([\\s\\S]*?)<\\/tbody>/;\n    const tbodyMatch = tableHtml.match(tbodyRegex);\n    if (tbodyMatch) {\n        const rowRegex = /<tr>([\\s\\S]*?)<\\/tr>/g;\n        let rowMatch;\n        while ((rowMatch = rowRegex.exec(tbodyMatch[1])) !== null) {\n            const cellRegex = /<td[^>]*>([\\s\\S]*?)<\\/td>/g;\n            let cellMatch;\n            \n            // Ô đầu tiên là tên giải\n            cellMatch = cellRegex.exec(rowMatch[1]);\n            if (!cellMatch) continue;\n            const prizeName = cleanText(cellMatch[1]);\n\n            // Các ô tiếp theo là kết quả\n            let provinceIndex = 0;\n            while ((cellMatch = cellRegex.exec(rowMatch[1])) !== null) {\n                if (provinceIndex < provinces.length) {\n                    const provinceName = provinces[provinceIndex];\n                    const numbersRaw = cellMatch[1];\n                    const numberSpanRegex = /<span[^>]*>([\\s\\S]*?)<\\/span>/g;\n                    const numbers = [];\n                    let numberMatch;\n                    while((numberMatch = numberSpanRegex.exec(numbersRaw)) !== null) {\n                        numbers.push(...cleanText(numberMatch[1]).split(' '));\n                    }\n                    \n                    ketQuaXoSo[provinceName][prizeName] = numbers.filter(n => n); // Lọc bỏ chuỗi rỗng\n                    provinceIndex++;\n                }\n            }\n        }\n    }\n}\n\n// --- 2. TRÍCH XUẤT CÁC BẢNG LOTO ---\nconst loto = {};\nconst lotoContainerRegex = /<div class=\"block-main-content view-loto\">([\\s\\S]*?)<\\/div>/;\nconst lotoContainerMatch = html.match(lotoContainerRegex);\n\nif (lotoContainerMatch) {\n    // Tách mỗi bảng loto thành một phần riêng\n    const lotoTablesHtml = lotoContainerMatch[1].split('<p class=\"padding10\">').slice(1);\n    \n    for (const tableHtml of lotoTablesHtml) {\n        // Lấy tên tỉnh từ tiêu đề\n        const titleMatch = tableHtml.match(/Loto (.*?) Thứ/);\n        if (titleMatch && titleMatch[1]) {\n            const provinceName = titleMatch[1].trim();\n            loto[provinceName] = {};\n            \n            // Lấy các hàng của bảng loto\n            const lotoRowRegex = /<td class=\"text-center\">(\\d+|-)<\\/td>\\s*<td.*?>([\\s\\S]*?)<\\/td>/g;\n            let rowMatch;\n            while ((rowMatch = lotoRowRegex.exec(tableHtml)) !== null) {\n                const head = rowMatch[1]; // Đầu số (0, 1, 2... hoặc -)\n                if (head === '-') continue;\n\n                const numbersRaw = cleanText(rowMatch[2]); // Dãy số loto\n                \n                const numbers = numbersRaw === '-' ? [] : numbersRaw.replace(/,\\s*$/,'').split(/, | |,/g).filter(n => n);\n                loto[provinceName][head] = numbers;\n            }\n        }\n    }\n}\n\n// --- KẾT QUẢ CUỐI CÙNG ---\nreturn [{\n    json: {\n        ketQuaXoSo,\n        loto\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[240,400],"id":"f5dd1cb3-fa11-48ae-85f9-c5d5175f19f8","name":"Code4","onError":"continueRegularOutput"}],"connections":{"Switch":{"main":[[{"node":"Code1","type":"main","index":0}],[{"node":"Code2","type":"main","index":0}],[{"node":"Code4","type":"main","index":0}]]},"xo-so":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Start":{"main":[[{"node":"xo-so","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"Start":[{"json":{"khuvuc":"xsmt","date":"14-09-2025"}}]},"versionId":"d3ee1408-837d-4ae3-a77d-e5b15e49c2ca","triggerCount":0,"shared":[{"createdAt":"2025-08-25T13:55:28.636Z","updatedAt":"2025-08-25T13:55:28.636Z","role":"workflow:owner","workflowId":"hQ8hcwT5NHeH2uNP","projectId":"Bsx4kBdHQHZGGC5J"}],"tags":[]}