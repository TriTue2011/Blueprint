{"createdAt":"2025-08-25T14:02:09.839Z","updatedAt":"2025-08-25T16:30:18.750Z","id":"ee5FHaxnI0IAgqkn","name":"thời tiết","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"tinh","type":"any"},{"name":"huyen","type":"any"}]}},"id":"ee54d330-1ad3-4e88-91d7-be5b24417987","typeVersion":1.1,"name":"Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[1264,1536]},{"parameters":{"url":"=https://dbtt.edu.vn{{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept-Language","value":"vi"},{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2080,1424],"id":"002d542f-b35a-4dba-aa8e-ad0a79df8bd8","name":"tinhthanhpho"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"dự báo theo ngày\": lineNgay,\n        \"dự báo theo giờ\": lineGio,\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2464,1328],"id":"e8095ad7-70b8-4827-a591-bc49459401d5","name":"Code9"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"dự báo theo ngày\": lineNgay,\n        \"dự báo theo giờ\": lineGio,\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3008,1216],"id":"872a1dd5-966c-4366-8fae-e8585add0318","name":"Code10"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.huyen }}","rightValue":"0","operator":{"type":"string","operation":"empty","singleValue":true},"id":"10339d33-0194-4950-85c9-dab85a268f81"}],"combinator":"and"},"renameOutput":true,"outputKey":"khong"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"4bf1f2eb-5836-44f8-b326-349f4fb53b0f","leftValue":"={{ $json.huyen }}","rightValue":"0","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"renameOutput":true,"outputKey":"co"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[1552,1536],"id":"20c7284a-0369-406a-bea4-69db0fa029c1","name":"huyen"},{"parameters":{"operation":"extractHtmlContent","extractionValues":{"values":[{"key":"huyen","cssSelector":".weather-city-inner li a","returnArray":true},{"key":"href","cssSelector":".weather-city-inner li a","returnValue":"attribute","attribute":"href","returnArray":true}]},"options":{}},"type":"n8n-nodes-base.html","typeVersion":1.2,"position":[2416,1776],"id":"a245e9e2-1388-4536-9117-242a8fec4d4c","name":"HTML1"},{"parameters":{"jsCode":"const names = $json.huyen || [];\nconst hrefs = $json.href || [];\nconst out = [];\n// 1. Tạo một Set để theo dõi các mục đã xuất hiện\nconst seen = new Set();\n\nfor (let i = 0; i < Math.min(names.length, hrefs.length); i++) {\n  const n = (names[i] || '').trim();\n  const h = hrefs[i] || '';\n\n  // Bỏ qua các mục không cần thiết\n  if (n.toLowerCase() === 'home' || n.toLowerCase() === 'forums') {\n    continue;\n  }\n\n  // 2. Tạo một khóa duy nhất từ tên và href\n  const uniqueKey = `${n}|${h}`;\n\n  // 3. Chỉ thêm vào kết quả nếu khóa này chưa tồn tại trong Set\n  if (!seen.has(uniqueKey)) {\n    // 4. Đánh dấu là đã thấy và thêm vào mảng kết quả\n    seen.add(uniqueKey);\n    out.push({ json: { name: n, href: h } });\n  }\n}\n\nreturn out;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2576,1776],"id":"5c726e9c-d10b-45ba-b5bb-42901a7c1d68","name":"Code15"},{"parameters":{"url":"={{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept-Language","value":"vi"},{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2544,1600],"id":"b380e8e8-796e-4f61-aa14-8517fc6d3a91","name":"quanhuyen1"},{"parameters":{"operation":"executeQuery","query":"DO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1\n    FROM weather\n    WHERE LOWER(province) = LOWER('{{ $('Start').item.json.tinh }}')\n      AND LOWER(district) = LOWER('{{ $('Start').item.json.huyen }}')\n  ) THEN\n    RAISE EXCEPTION '❌ Không tìm thấy dữ liệu';\n  END IF;\nEND $$;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1760,1680],"id":"d77e0968-c520-43f5-8aa7-16807f5da1b7","name":"Execute a SQL query1","retryOnFail":false,"maxTries":2,"waitBetweenTries":10,"alwaysOutputData":false,"credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}},"onError":"continueErrorOutput"},{"parameters":{"operation":"executeQuery","query":"SELECT *\nFROM weather\nWHERE LOWER(province) = LOWER('{{ $('Start').item.json.tinh }}')\n  AND LOWER(district) = LOWER(\n        COALESCE(NULLIF('{{ $('Start').item.json.huyen }}',''), '0')\n  );\n\n\n\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1776,1440],"id":"52ebcc50-8d98-4ab5-ba06-1a4383fced7f","name":"Execute a SQL query2","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"url":"=https://dbtt.edu.vn{{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept-Language","value":"vi"},{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2240,1776],"id":"c49f3dd4-d6c2-4164-b7fe-71210869b53d","name":"tinhthanhpho5"},{"parameters":{"operation":"executeQuery","query":"SELECT *\nFROM weather\nWHERE LOWER(province) = LOWER('{{$(\"Start\").first().json.tinh}}')\n  AND LOWER(district) = LOWER('0');","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2064,1776],"id":"9d8083dc-35f9-4548-a7cd-9c0f745a9131","name":"Execute a SQL query3","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[2800,1760],"id":"26691746-0410-4a55-a9f5-bff8cb94b7b0","name":"Loop Over Items"},{"parameters":{},"type":"n8n-nodes-base.noOp","name":"Replace Me","typeVersion":1,"position":[3248,1776],"id":"b2581703-d849-4b7c-998d-1797443fea84"},{"parameters":{"operation":"executeQuery","query":"SELECT *\nFROM weather\nWHERE LOWER(province) = LOWER('{{ $('Start').item.json.tinh }}')\n  AND LOWER(district) = LOWER('{{ $('Start').item.json.huyen }}');","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2064,1600],"id":"b18fb70a-b5db-46cd-93d7-49911eb4d1a8","name":"Execute a SQL query4","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT *\nFROM weather\nWHERE LOWER(province) = LOWER('{{$(\"Start\").first().json.tinh}}')\n  AND LOWER(district) = LOWER('{{$(\"Start\").first().json.huyen}}');","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3040,1648],"id":"9fd22027-83ba-496f-9df0-ec83493a515a","name":"Execute a SQL query6","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"url":"={{ $json.url }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept-Language","value":"vi"},{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[3248,1600],"id":"75a11d41-8900-4d80-be43-65b91f6b4936","name":"quanhuyen2"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"dự báo theo ngày\": lineNgay,\n        \"dự báo theo giờ\": lineGio,\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3792,1552],"id":"f030b341-2f7a-4d6d-b7ff-d673c0f00cc4","name":"Code16"},{"parameters":{"operation":"select","schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"weather","mode":"list","cachedResultName":"weather"},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1824,2016],"id":"d7c51e12-2081-4969-951b-c59e673bfcf8","name":"Select rows from a table","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"weather","mode":"list","cachedResultName":"weather"},"columns":{"mappingMode":"defineBelow","value":{"district":"={{ $json.name }}","url":"={{ $json.href }}","province":"={{ $('Start').item.json.tinh }}"},"matchingColumns":["tinh","huyen"],"schema":[{"id":"province","displayName":"province","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"district","displayName":"district","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"url","displayName":"url","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3024,1776],"id":"835b650c-06e9-4c97-a78c-ddf51fcc3092","name":"Insert rows in a table","credentials":{"postgres":{"id":"vDBK6XLC0TBpoMww","name":"Postgres account"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Start').item.json.dubao }}","rightValue":"=yes","operator":{"type":"string","operation":"equals"},"id":"bfe6aaa2-1703-4797-a3af-0debc7a91d56"}],"combinator":"and"},"renameOutput":true,"outputKey":"dự báo"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"324eb7bf-1c83-43c8-9d7e-5d83094e0154","leftValue":"={{ $('Start').item.json.dubao }}","rightValue":"yes","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[2848,1344],"id":"b61d1678-fdd9-405f-9751-f71de9de430f","name":"Switch"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"thời tiết hiện tại\": lineHienTai,\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3056,1376],"id":"4f9a5a17-0671-4861-8479-7bc1a0cc133b","name":"Code"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Start').item.json.dubao }}","rightValue":"=yes","operator":{"type":"string","operation":"equals"},"id":"bfe6aaa2-1703-4797-a3af-0debc7a91d56"}],"combinator":"and"},"renameOutput":true,"outputKey":"dự báo"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"324eb7bf-1c83-43c8-9d7e-5d83094e0154","leftValue":"={{ $('Start').item.json.dubao }}","rightValue":"yes","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[2256,1424],"id":"66d9dbef-ef6a-405d-ba65-11eff176eb6c","name":"Switch1"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"thời tiết hiện tại\": lineHienTai,\n\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2480,1488],"id":"bd107da0-a03e-44a2-bbd7-f0f62d4892c6","name":"Code11"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Start').item.json.dubao }}","rightValue":"=yes","operator":{"type":"string","operation":"equals"},"id":"bfe6aaa2-1703-4797-a3af-0debc7a91d56"}],"combinator":"and"},"renameOutput":true,"outputKey":"dự báo"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"324eb7bf-1c83-43c8-9d7e-5d83094e0154","leftValue":"={{ $('Start').item.json.dubao }}","rightValue":"yes","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[3664,1648],"id":"c5f44182-1110-4f3d-ac06-7798edcbcfd0","name":"Switch2"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"thời tiết hiện tại\": lineHienTai,\n\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3824,1712],"id":"2c6d8826-a36a-4d63-bba2-94b7c042037e","name":"Code17"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"thời tiết hiện tại\": lineHienTai,      \n        \"dự báo theo ngày\": lineNgay,\n        \"dự báo theo giờ\": lineGio,\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2224,1280],"id":"edbcabb7-d826-4ec3-a65d-6fa0e88a2935","name":"Code12"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"thời tiết hiện tại\": lineHienTai,\n        \"dự báo theo ngày\": lineNgay,\n        \"dự báo theo giờ\": lineGio,      \n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2736,1568],"id":"0c916438-a7ed-4189-aeb4-032417f4f703","name":"Code1"},{"parameters":{"jsCode":"// ===== Input =====\nconst rawHtml = (items[0]?.json?.data || \"\");\n\n// ===== Helpers =====\nconst normalize = (s) => (s || \"\").replace(/\\s+/g, \" \").trim();\nconst stripTags = (s) => normalize((s || \"\").replace(/<[^>]*>/g, \" \"));\nconst getMatch = (s, re, idx = 1) => {\n    if (!s) return \"\";\n    const m = s.match(re);\n    return m ? normalize(m[idx] || \"\") : \"\";\n};\nconst toVNTime = (timeStr, dayOffset = 0) => {\n    if (!timeStr) return \"\";\n    const hm = timeStr.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!hm) return \"\";\n    let hh = parseInt(hm[1], 10);\n    let mm = hm[2] ? parseInt(hm[2], 10) : 0;\n    const ap = hm[3] ? hm[3].toUpperCase() : null;\n    if (ap === \"PM\" && hh !== 12) hh += 12;\n    if (ap === \"AM\" && hh === 12) hh = 0;\n    const d = new Date();\n    d.setDate(d.getDate() + (dayOffset || 0));\n    d.setHours(hh, mm, 0, 0);\n    return d.toLocaleTimeString(\"vi-VN\", { hour: \"2-digit\", minute: \"2-digit\", hour12: false, timeZone: \"Asia/Ho_Chi_Minh\" });\n};\n\n// ===== 1) Vị trí =====\nconst crumbAll = getMatch(rawHtml, /<nav[^>]*rank-math-breadcrumb[^>]*>([\\s\\S]*?)<\\/nav>/i);\nconst crumbNames = Array.from(crumbAll.matchAll(/>([^<]+)<\\/a>|<span class=[\"']last[\"']>([^<]+)<\\/span>/gi))\n    .map(m => stripTags(m[1] || m[2] || \"\"))\n    .filter(Boolean);\nlet vitri = \"vị trí này\";\nif (crumbNames.length >= 4) {\n    vitri = `${crumbNames[3]} - ${crumbNames[2]}`;\n} else {\n    vitri = stripTags(getMatch(rawHtml, /<h1[^>]*>([\\s\\S]*?)<\\/a>/i)).replace(/^Dự báo\\s+Thời tiết\\s+/i, \"\") || vitri;\n}\n\n// ===== 2) Dữ liệu cho \"Thời tiết hiện tại\" =====\nconst currentBlock = getMatch(rawHtml, /<section class=[\"']weather-general[^>]*>([\\s\\S]*?)<\\/section>/i);\nconst temperature = getMatch(currentBlock, /<div class=[\"']metro-weather-hi[\"'][^>]*>\\s*<strong>(.*?)<\\/strong>/i);\nconst feels_like = getMatch(currentBlock, /<div class=[\"']metro-weather-lo[\"'][^>]*>[\\s\\S]*?<strong>(.*?)<\\/strong>/i);\nconst description = getMatch(currentBlock, /<div class=[\"']metro-weather-overview-block-description[\"'][^>]*>\\s*<p>(.*?)<\\/p>/i);\nconst humidity = getMatch(currentBlock, /<li>Độ ẩm\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst wind = getMatch(currentBlock, /<li>Gió\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst uv = getMatch(currentBlock, /<li>UV\\s*<strong>(.*?)<\\/strong><\\/li>/i);\nconst sunrise = getMatch(currentBlock, /<strong>Mặt trời mọc<\\/strong>\\s*([0-9:]+\\s*am)/i);\nconst sunset = getMatch(currentBlock, /<strong>Mặt trời lặn<\\/strong>\\s*([0-9:]+\\s*pm)/i);\nconst airBlock = getMatch(rawHtml, /<div class=\"air-quality\">([\\s\\S]*?)<div class=\"sunrise-sunset/i);\nconst airStatus = getMatch(airBlock, /<p class=\"title\">(.*?)<\\/p>/i);\n\n// ===== 3) Dự báo theo ngày =====\nconst dayCards = rawHtml.match(/<div class=\"w_weather\">[\\s\\S]*?<\\/div>/g) || [];\nconst days = [];\nfor (const card of dayCards) {\n    const dayName = stripTags(getMatch(card, /<span class=\"day\">\\s*<b>([\\s\\S]*?)<\\/b>/i));\n    if (!dayName || /hiện tại/i.test(dayName)) continue;\n    const dateStr = stripTags(getMatch(card, /<span class=\"date\">([\\s\\S]*?)<\\/span>/i));\n    const tempRegex = /<span>([\\s\\S]*?)<\\/span>\\s*\\/\\s*<span>([\\s\\S]*?)<\\/span>/i;\n    const low = stripTags(getMatch(card, tempRegex, 1));\n    const high = stripTags(getMatch(card, tempRegex, 2));\n    const iconAlt = stripTags(getMatch(card, /<img[^>]*alt=\"([^\"]*)\"/i));\n    days.push({ dayName, dateStr, low, high, iconAlt });\n}\nconst days4 = days.slice(0, 4);\nconst lineNgay = `dự báo theo ngày: ` + (\n    days4.length\n        ? days4.map(d => {\n            const seg = [\n                `${d.dayName}${d.dateStr ? ` (${d.dateStr})` : \"\"}`,\n                (d.low && d.high) ? `từ ${d.low} đến ${d.high}` : (d.low || d.high || \"\"),\n                (d.iconAlt ? `dự báo ${d.iconAlt}` : \"\")\n            ].filter(Boolean).join(\", \");\n            return seg;\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 4) Theo giờ (ĐÃ SỬA LỖI TRIỆT ĐỂ) =====\nconst hourlyItems = [];\nlet lastHour = -1, dayOffset = 0;\nconst hourBlocks = rawHtml.match(/<div class=\"weather-time-item\">[\\s\\S]*?(?=<div class=\"weather-time-item\"|$)/gi) || [];\nfor (const blk of hourBlocks) {\n    const timeStr = stripTags(getMatch(blk, /<div class=\"title[^>]*>([\\s\\S]*?)<\\/div>/i));\n    if (timeStr) {\n        const hm = timeStr.match(/(\\d+)/);\n        if (hm) {\n            let h = parseInt(hm[0], 10);\n            if (timeStr.toLowerCase().includes('pm') && h !== 12) h += 12;\n            if (timeStr.toLowerCase().includes('am') && h === 12) h = 0;\n            if (lastHour !== -1 && h < lastHour) dayOffset++;\n            lastHour = h;\n        }\n    }\n\n    let temp = \"\";\n    let feels_like_hourly = \"\";\n    const tempBlock = getMatch(blk, /<p\\s+class=[\"']temp[\"'][^>]*>([\\s\\S]*?)<\\/p>/i);\n\n    if (tempBlock) {\n        // Ưu tiên tìm trường hợp có cả 2 nhiệt độ\n        const twoTempsMatch = tempBlock.match(/<span>(.*?)<\\/span>\\s*\\/\\s*<span>(.*?)<\\/span>/i);\n        if (twoTempsMatch) {\n            temp = normalize(twoTempsMatch[1]);\n            feels_like_hourly = normalize(twoTempsMatch[2]);\n        } else {\n            // Nếu không có, tìm trường hợp chỉ có 1 nhiệt độ\n            const oneTempMatch = tempBlock.match(/<span>(.*?)<\\/span>/i);\n            if (oneTempMatch) {\n                temp = normalize(oneTempMatch[1]);\n            }\n        }\n    }\n\n    const humidity_hourly = getMatch(blk, /<p class=\"humidity\">[\\s\\S]*?<span>(.*?)<\\/span>[\\s\\S]*?<\\/p>/i);\n    const desc = stripTags(getMatch(blk, /<p class=\"desc\">([\\s\\S]*?)<\\/p>/i));\n    \n    hourlyItems.push({\n        time: toVNTime(timeStr, dayOffset) || \"\",\n        temp,\n        feels_like: feels_like_hourly,\n        humidity: humidity_hourly,\n        desc,\n    });\n}\nconst hourly4 = hourlyItems.slice(0, 4);\nconst lineGio = `dự báo theo giờ: ` + (\n    hourly4.length\n        ? hourly4.map(h => {\n            const parts = [];\n            if (h.time) parts.push(h.time);\n            if (h.temp) parts.push(h.temp); // Dòng này sẽ hoạt động vì `temp` đã được lấy đúng\n            if (h.feels_like) parts.push(`(cảm giác như ${h.feels_like})`);\n            if (h.humidity) parts.push(`độ ẩm ${h.humidity}`);\n            if (h.desc) parts.push(`${h.desc}`);\n            return parts.filter(Boolean).join(\", \");\n        }).join(\"; \")\n        : \"chưa có dữ liệu\"\n) + \".\";\n\n// ===== 5) Hoàn thiện chuỗi \"Hiện tại\" =====\nconst curPieces = [];\nif (temperature) curPieces.push(`nhiệt độ ${temperature}`);\nif (feels_like) curPieces.push(`cảm giác như ${feels_like}`);\nif (humidity) curPieces.push(`độ ẩm ${humidity}`);\nif (wind) curPieces.push(`gió ${wind}`);\nif (uv) curPieces.push(`UV ${uv}`);\nif (description) curPieces.push(`${description}`);\nif (airStatus) curPieces.push(`chất lượng không khí ${airStatus}`);\nif (sunrise && sunset) curPieces.push(`mặt trời mọc ${sunrise}, lặn ${sunset}`);\nconst lineHienTai = `thời tiết hiện tại: ${curPieces.filter(Boolean).join(\", \")}.`;\n\n// ===== Output =====\nreturn [{\n    json: {\n        \"vị trí\": vitri,\n        \"thời tiết hiện tại\": lineHienTai,\n        \"dự báo theo ngày\": lineNgay,\n        \"dự báo theo giờ\": lineGio,\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3440,1600],"id":"04a76106-3e31-4f6a-b271-7def3e172f31","name":"Code18"}],"connections":{"tinhthanhpho":{"main":[[{"node":"Code12","type":"main","index":0}]]},"huyen":{"main":[[{"node":"Execute a SQL query2","type":"main","index":0}],[{"node":"Execute a SQL query1","type":"main","index":0}]]},"HTML1":{"main":[[{"node":"Code15","type":"main","index":0}]]},"Code15":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"quanhuyen1":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Execute a SQL query1":{"main":[[{"node":"Execute a SQL query4","type":"main","index":0}],[{"node":"Execute a SQL query3","type":"main","index":0}]]},"Execute a SQL query2":{"main":[[{"node":"tinhthanhpho","type":"main","index":0}]]},"tinhthanhpho5":{"main":[[{"node":"HTML1","type":"main","index":0}]]},"Execute a SQL query3":{"main":[[{"node":"tinhthanhpho5","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"Execute a SQL query6","type":"main","index":0}],[{"node":"Insert rows in a table","type":"main","index":0}]]},"Replace Me":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Execute a SQL query4":{"main":[[{"node":"quanhuyen1","type":"main","index":0}]]},"Execute a SQL query6":{"main":[[{"node":"quanhuyen2","type":"main","index":0}]]},"quanhuyen2":{"main":[[{"node":"Code18","type":"main","index":0}]]},"Start":{"main":[[{"node":"huyen","type":"main","index":0}]]},"Insert rows in a table":{"main":[[{"node":"Replace Me","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Code10","type":"main","index":0}],[{"node":"Code","type":"main","index":0}]]},"Switch1":{"main":[[{"node":"Code9","type":"main","index":0}],[{"node":"Code11","type":"main","index":0}]]},"Switch2":{"main":[[{"node":"Code16","type":"main","index":0}],[{"node":"Code17","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"76a43800-85eb-42a3-9d02-44f4b5a9afd5","triggerCount":0,"shared":[{"createdAt":"2025-08-25T14:02:09.839Z","updatedAt":"2025-08-25T14:02:09.839Z","role":"workflow:owner","workflowId":"ee5FHaxnI0IAgqkn","projectId":"Bsx4kBdHQHZGGC5J"}],"tags":[]}