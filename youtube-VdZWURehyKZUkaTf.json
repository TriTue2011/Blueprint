{"createdAt":"2025-08-25T16:39:08.447Z","updatedAt":"2025-08-26T13:54:35.669Z","id":"VdZWURehyKZUkaTf","name":"youtube","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"key","type":"any"}]}},"id":"8af4d47b-ee11-4293-86b8-5385cc951ffd","typeVersion":1.1,"name":"Start","type":"n8n-nodes-base.executeWorkflowTrigger","position":[176,-48]},{"parameters":{"jsCode":"// Lấy dữ liệu HTML từ input\nconst html_content = $input.first().json.data;\n\nfunction parseViewCount(viewText) {\n    /**\n     * Chuyển đổi chuỗi lượt xem thành số nguyên\n     * Xử lý các trường hợp: \"1.2M\", \"500K\", \"1.234.567\", etc.\n     */\n    if (!viewText) return 0;\n    \n    // Loại bỏ từ \"lượt xem\" và khoảng trắng\n    let cleanText = viewText.replace(/ lượt xem| views/g, '').trim();\n    \n    // Xử lý trường hợp có M (triệu), K (nghìn), B (tỷ)\n    let multiplier = 1;\n    if (cleanText.endsWith('M')) {\n        multiplier = 1000000;\n        cleanText = cleanText.slice(0, -1);\n    } else if (cleanText.endsWith('K')) {\n        multiplier = 1000;\n        cleanText = cleanText.slice(0, -1);\n    } else if (cleanText.endsWith('B')) {\n        multiplier = 1000000000;\n        cleanText = cleanText.slice(0, -1);\n    }\n    \n    // Loại bỏ dấu phân cách\n    if (multiplier > 1) {\n        // Với K, M, B - giữ lại dấu chấm thập phân\n        cleanText = cleanText.replace(/,/g, '');\n    } else {\n        // Với số nguyên - loại bỏ tất cả dấu phân cách\n        cleanText = cleanText.replace(/[.,]/g, '');\n    }\n    \n    try {\n        if (multiplier > 1) {\n            return Math.floor(parseFloat(cleanText) * multiplier);\n        } else {\n            return parseInt(cleanText) || 0;\n        }\n    } catch (error) {\n        return 0;\n    }\n}\n\n// Tìm đối tượng JavaScript 'ytInitialData' trong chuỗi HTML bằng regex\nconst regex = /var ytInitialData = (.*?);<\\/script>/s;\nconst match = html_content.match(regex);\n\nif (match && match[1]) {\n    const jsonStr = match[1];\n    \n    try {\n        const data = JSON.parse(jsonStr);\n        \n        // Lấy danh sách các video từ dữ liệu\n        const contents = data.contents.twoColumnSearchResultsRenderer.primaryContents.sectionListRenderer.contents;\n        \n        const videoList = [];\n        \n        for (const section of contents) {\n            if (section.itemSectionRenderer) {\n                for (const item of section.itemSectionRenderer.contents) {\n                    if (item.videoRenderer) {\n                        const videoInfo = item.videoRenderer;\n                        \n                        // Lấy tiêu đề video - xử lý cả runs và simpleText\n                        let title = \"N/A\";\n                        if (videoInfo.title) {\n                            if (videoInfo.title.runs && videoInfo.title.runs.length > 0) {\n                                title = videoInfo.title.runs[0].text || \"N/A\";\n                            } else if (videoInfo.title.simpleText) {\n                                title = videoInfo.title.simpleText;\n                            }\n                        }\n                        \n                        // Xử lý chuỗi lượt xem\n                        let viewCount = 0;\n                        if (videoInfo.viewCountText) {\n                            let viewCountText = '';\n                            if (videoInfo.viewCountText.simpleText) {\n                                viewCountText = videoInfo.viewCountText.simpleText;\n                            } else if (videoInfo.viewCountText.runs) {\n                                viewCountText = videoInfo.viewCountText.runs.map(run => run.text || '').join('');\n                            }\n                            viewCount = parseViewCount(viewCountText);\n                        }\n                        \n                        // Lấy video ID và tạo URL\n                        const videoId = videoInfo.videoId;\n                        if (videoId) {\n                            const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;\n                            videoList.push({\n                                url: videoUrl,\n                                views: viewCount,\n                                title: title\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Sắp xếp danh sách video theo lượt xem giảm dần\n        const sortedVideos = videoList.sort((a, b) => b.views - a.views);\n        \n        // Lấy 10 video đầu tiên\n        const top10Videos = sortedVideos.slice(0, 10);\n        \n        // In kết quả\n        console.log(\"Top 10 video có lượt xem nhiều nhất:\");\n        console.log(\"=\".repeat(80));\n        \n        top10Videos.forEach((video, index) => {\n            console.log(`${(index + 1).toString().padStart(2)}. ${video.title}`);\n            console.log(`    Lượt xem: ${video.views.toLocaleString()}`);\n            console.log(`    Link: ${video.url}`);\n            console.log(\"-\".repeat(80));\n        });\n        \n        // Return kết quả để có thể sử dụng trong workflow\n        return top10Videos;\n        \n    } catch (error) {\n        console.log(`Lỗi khi phân tích JSON: ${error.message}`);\n        return [];\n    }\n} else {\n    console.log(\"Không tìm thấy 'ytInitialData' trong HTML.\");\n    \n    // Thử tìm với pattern khác\n    const alternativeRegex = /window\\[\"ytInitialData\"\\] = (.*?);<\\/script>/s;\n    const alternativeMatch = html_content.match(alternativeRegex);\n    \n    if (alternativeMatch) {\n        console.log(\"Tìm thấy ytInitialData với pattern thay thế - hãy thử lại với pattern này.\");\n    } else {\n        console.log(\"Không tìm thấy dữ liệu YouTube nào trong HTML.\");\n    }\n    return [];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[608,-48],"id":"73c9c707-c4b3-47b9-95f9-1fc9fb8f4e45","name":"10video"},{"parameters":{"url":"=https://www.youtube.com/results","sendQuery":true,"queryParameters":{"parameters":[{"name":"search_query","value":"={{ $json.key }}"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"},{"name":"Accept","value":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"},{"name":"Accept-Language","value":"vi-VN,vi;q=0.9,en;q=0.8"}]},"options":{"response":{"response":{}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[384,-48],"id":"f7d65325-f358-45cc-8da1-a03956925fd2","name":"HTTP Request1"},{"parameters":{"method":"POST","url":"https://bot-api.zapps.me/bot3418113969586575932:oeafbMuUkxqSMaCKGcWnhWapdzGdJjrwkoSSJRxRooZECXgQvFBLUCLPRrMfIiXI/deleteWebhook","sendBody":true,"bodyParameters":{"parameters":[{"name":"url","value":"http://192.168.1.200:8123/api/webhook/-mY5tTgNUg8vgAJR3S1x0hLUR"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[32,64],"id":"7bf43636-b5de-4958-ade3-259e68e3e5ce","name":"HTTP Request"}],"connections":{"HTTP Request1":{"main":[[{"node":"10video","type":"main","index":0}]]},"Start":{"main":[[{"node":"HTTP Request1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"f7585eda-792b-48c5-ad9d-d3be92b54b3c","triggerCount":0,"shared":[{"createdAt":"2025-08-25T16:39:08.447Z","updatedAt":"2025-08-25T16:39:08.447Z","role":"workflow:owner","workflowId":"VdZWURehyKZUkaTf","projectId":"Bsx4kBdHQHZGGC5J"}],"tags":[]}