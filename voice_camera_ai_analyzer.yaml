blueprint:
  name: Voice - Smart Camera AI Analyzer
  author: luuquangvu_benbap
  description: |
    Smart AI-powered camera analysis script
    - Tự hiểu hỏi 1 cam hay nhiều cam
    - Tự map tên tự nhiên (“phòng khách”, “ban công”, “cửa”) sang entity thật
    - Nếu user nói sai tên cam → dùng default, KHÔNG quét hết
    - Trả lời tiếng Việt, prompt tiếng Anh
    - Hỗ trợ structure (overview, cameras_with_people, cameras_no_people, cameras_error, summary)
  domain: script
  homeassistant:
    min_version: 2025.8.0

  input:
    ai_task_settings:
      name: AI Task Settings
      icon: mdi:robot-outline
      collapsed: true
      input:
        ai_task_entity:
          name: AI Task Entity
          description: Leave empty to use system default AI Task
          selector:
            entity:
              filter:
                - domain:
                    - ai_task
              multiple: false
          default:

    camera_settings:
      name: Camera Settings
      icon: mdi:cctv
      collapsed: true
      input:
        default_camera:
          name: Default Camera
          description: Dùng khi user nói sai tên hoặc không nói
          selector:
            entity:
              filter:
                - domain:
                    - camera
              multiple: false
          default: camera.my_home_pk2
        available_cameras:
          name: Available Cameras List
          description: Danh sách camera để phân tích nhiều camera
          selector:
            entity:
              domain:
                - camera
              multiple: true
          default:
            - camera.my_home_bc
            - camera.my_home_pk2
            - camera.my_home_pk1

    prompt_settings:
      name: Prompt Settings
      icon: mdi:robot
      collapsed: true
      input:
        system_prompt:
          name: System Prompt (English)
          description: Main instructions for the LLM
          selector:
            text:
              multiline: true
          default: |
            You are an AI assistant for a Home Assistant smart home system. You analyze live camera streams.

            IMPORTANT CONTEXT:
            - The user may ask you to:
              * Detect people, pets, or motion
              * Check if the camera is online/offline
              * Describe what is seen in the image (objects, people, pets, background)
            - You are called from a script that may send you ONE or MULTIPLE cameras.
            - You MUST base your answer ONLY on the attached media.
            - You MUST answer IN VIETNAMESE with proper diacritics.

            USER QUESTION:
            "{user_question}"

            AVAILABLE CAMERAS:
            {camera_list}

            ### MODES
            1. DESCRIBE MODE (when user says “có những gì”, “thấy gì”, “bên trong có gì”)
               - Describe EVERYTHING visible in the frame: people, pets (cat/dog), vehicles, objects, doors, background, lighting.
               - Do NOT limit to people.
               - Output should be short, clear, natural Vietnamese.
            2. DETECTION MODE (when user says “có người không”, “có mèo không”, “có ai không”)
               - Focus on target the user asked (person/pet).
               - If not seen → say clearly “Không thấy …”.
               - Keep it short for TTS.
            3. MULTI-CAMERA MODE (when user says “camera nào”, “tất cả camera”, “kiểm tra tất cả”)
               - You will receive MULTIPLE camera attachments.
               - You MUST return structured data:
                 * overview: short description of all cameras
                 * cameras_with_people: cameras where you SEE people
                 * cameras_no_people: cameras where you see NO people
                 * cameras_error: cameras dark/blocked/offline
                 * summary: ONE Vietnamese sentence ≤ 120 chars for TTS
            DETECTION RULES:
            - “Có người” = any visible human.
            - If user asked about pets, prioritize cats/dogs over people.
            - If the frame is too dark/blurred → say so, do not guess.
            - Do NOT describe fixed walls/furniture unless needed for location.
            OUTPUT RULES:
            - Always in Vietnamese.
            - If structure is provided, fill ALL required fields.
            - No Markdown, no code blocks.
            - Do NOT invent unseen cameras or content.
            SUMMARY FIELD:
            - One short Vietnamese sentence

mode: parallel
max_exceeded: silent

variables:
  version: 20251030_final_fixed_with_selector_dict

fields:
  instructions:
    name: Camera Question
    description: Hỏi bất kỳ về camera (1 cam hoặc nhiều cam)
    selector:
      text:
        multiline: true
    required: true
  camera_entity:
    name: Specific Camera (Optional)
    description: Chọn camera cụ thể, nếu bỏ trống sẽ đoán theo câu hỏi
    selector:
      entity:
        filter:
          - domain:
              - camera
        multiple: false
    required: false

sequence:
  - variables:
      ai_task_entity: !input ai_task_entity
      default_camera: !input default_camera
      available_cameras: !input available_cameras
      system_prompt: !input system_prompt
      user_question: "{{ instructions | default('') | trim }}"
      camera_entity_raw: "{{ camera_entity | default('') | trim }}"

  # Validate question
  - if:
      - condition: template
        value_template: "{{ not user_question }}"
    then:
      - variables:
          response:
            error: "Please provide a question about cameras."
      - stop: "Missing question"
        response_variable: response

  # Build camera list
  - variables:
      camera_list_text: >
        {% set ns = namespace(list=[]) %}
        {% for cam in available_cameras %}
          {% if states(cam) is not none %}
            {% set name = state_attr(cam, 'friendly_name') or cam %}
            {% set ns.list = ns.list + ['- ' ~ name ~ ' (' ~ cam ~ ')'] %}
          {% endif %}
        {% endfor %}
        {{ ns.list | join('\n') }}

  # Guess camera
  - variables:
      user_question_lc: "{{ user_question | lower }}"
      guessed_camera: >
        {% if 'phòng khách' in user_question_lc %}
          camera.my_home_pk2
        {% elif 'ban công' in user_question_lc %}
          camera.my_home_bc
        {% elif 'cửa' in user_question_lc %}
          camera.my_home_pk1
        {% else %}
          {{ '' }}
        {% endif %}

  # Validate cameras + select final camera
  - variables:
      user_camera_valid: >
        {% if camera_entity_raw %}
          {{ states(camera_entity_raw) is not none }}
        {% else %}
          false
        {% endif %}
      guessed_camera_valid: >
        {% if guessed_camera %}
          {{ states(guessed_camera) is not none }}
        {% else %}
          false
        {% endif %}
      default_camera_valid: >
        {% if default_camera %}
          {{ states(default_camera) is not none }}
        {% else %}
          false
        {% endif %}
      final_single_camera: >
        {% if user_camera_valid %}
          {{ camera_entity_raw }}
        {% elif guessed_camera_valid %}
          {{ guessed_camera }}
        {% elif default_camera_valid %}
          {{ default_camera }}
        {% else %}
          {% for cam in available_cameras %}
            {% if states(cam) is not none %}
              {{ cam }}
              {% break %}
            {% endif %}
          {% endfor %}
        {% endif %}
      use_single_camera: >
        {% set q = user_question | lower %}
        {% if 'tất cả' in q
              or 'all camera' in q
              or 'camera nào' in q
              or 'những camera' in q
              or 'các camera' in q
              or 'which cameras' in q
              or 'check all' in q %}
          false
        {% else %}
          true
        {% endif %}

  # Prepare attachments
  - variables:
      single_attachment: >
        {
          "media_content_id": "media-source://camera/{{ final_single_camera }}",
          "media_content_type": "application/vnd.apple.mpegurl",
          "metadata": {
            "title": "{{ state_attr(final_single_camera, 'friendly_name') or final_single_camera }}",
            "thumbnail": "/api/camera_proxy/{{ final_single_camera }}",
            "media_class": "video"
          }
        }
      all_attachments: >
        {% set ns = namespace(items=[]) %}
        {% for cam in available_cameras %}
          {% if states(cam) is not none %}
            {% set name = state_attr(cam, 'friendly_name') or cam %}
            {% set item = {
              'media_content_id': 'media-source://camera/' ~ cam,
              'media_content_type': 'application/vnd.apple.mpegurl',
              'metadata': {
                'title': name,
                'thumbnail': '/api/camera_proxy/' ~ cam,
                'media_class': 'video'
              }
            } %}
            {% set ns.items = ns.items + [item] %}
          {% endif %}
        {% endfor %}
        {{ ns.items }}
      camera_count: >
        {% set ok = [] %}
        {% for cam in available_cameras %}
          {% if states(cam) is not none %}
            {% set ok = ok + [cam] %}
          {% endif %}
        {% endfor %}
        {{ ok | length }}

  # Build final prompt
  - variables:
      final_prompt: >
        {{ system_prompt
           | replace('{camera_list}', camera_list_text)
           | replace('{user_question}', user_question) }}

  # Call AI Task
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ not ai_task_entity }}"
        sequence:
          - action: ai_task.generate_data
            data:
              task_name: "Smart Camera Analysis"
              instructions: "{{ final_prompt }}"
              attachments: >
                {% if use_single_camera %}
                  {{ [single_attachment] }}
                {% else %}
                  {{ all_attachments }}
                {% endif %}
              structure:
                overview:
                  description: "Short status of all cameras"
                  required: true
                  selector:
                    text: {}
                cameras_with_people:
                  description: "List of cameras with people"
                  required: true
                  selector:
                    text: {}
                cameras_no_people:
                  description: "List of cameras without people"
                  required: true
                  selector:
                    text: {}
                cameras_error:
                  description: "List of cameras with errors"
                  required: true
                  selector:
                    text: {}
                summary:
                  description: "One sentence summary in Vietnamese"
                  required: true
                  selector:
                    text: {}
            response_variable: ai_result
      - conditions:
          - condition: template
            value_template: "{{ ai_task_entity is not none }}"
        sequence:
          - action: ai_task.generate_data
            data:
              entity_id: "{{ ai_task_entity }}"
              task_name: "Smart Camera Analysis"
              instructions: "{{ final_prompt }}"
              attachments: >
                {% if use_single_camera %}
                  {{ [single_attachment] }}
                {% else %}
                  {{ all_attachments }}
                {% endif %}
              structure:
                overview:
                  description: "Short status of all cameras"
                  required: true
                  selector:
                    text: {}
                cameras_with_people:
                  description: "List of cameras with people"
                  required: true
                  selector:
                    text: {}
                cameras_no_people:
                  description: "List of cameras without people"
                  required: true
                  selector:
                    text: {}
                cameras_error:
                  description: "List of cameras with errors"
                  required: true
                  selector:
                    text: {}
                summary:
                  description: "One sentence summary in Vietnamese"
                  required: true
                  selector:
                    text: {}
            response_variable: ai_result

  # Return
  - variables:
      response:
        mode: "{{ 'single' if use_single_camera else 'multi' }}"
        camera_count: "{{ camera_count }}"
        data: "{{ ai_result.data }}"
  - stop: ""
    response_variable: response
