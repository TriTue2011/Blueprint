blueprint:
  name: Voice - Smart Camera AI Analyzer
  author: luuquangvu_benbap
  description: |
    # Smart AI-powered camera analysis script

    ## Features:
    - **Single or Multi camera mode** (auto-detected by LLM)
    - **English prompts, Vietnamese responses**
    - **Handles pets, people, weather, errors**
    - **Single LLM call, structure support**
    - **Optimized for Home Assistant Assist**

  domain: script
  homeassistant:
    min_version: 2025.8.0

  input:
    ai_task_settings:
      name: AI Task Settings
      icon: mdi:robot-outline
      collapsed: true
      input:
        ai_task_entity:
          name: AI Task Entity
          description: Leave empty to use system default AI Task
          selector:
            entity:
              filter:
                - domain:
                    - ai_task
              multiple: false
          default:

    camera_settings:
      name: Camera Settings
      icon: mdi:cctv
      collapsed: true
      input:
        default_camera:
          name: Default Camera
          description: Default camera when not specified
          selector:
            entity:
              filter:
                - domain:
                    - camera
              multiple: false
          default: camera.my_home_bc
        available_cameras:
          name: Available Cameras List
          description: All cameras available for multi-camera analysis
          selector:
            entity:
              domain:
                - camera
              multiple: true
          default: []

    prompt_settings:
      name: Prompt Settings
      icon: mdi:robot
      collapsed: true
      input:
        system_prompt:
          name: System Prompt (English)
          description: Main instructions for the LLM
          selector:
            text:
              multiline: true
          default: |
            You are an AI assistant for a Home Assistant smart home system. You analyze live camera streams.

            IMPORTANT CONTEXT:
            - You are called from a script that may send you ONE camera or MULTIPLE cameras.
            - Each camera is sent via "attachments" (media-source://camera/...), base your answer ONLY on those.
            - NEVER invent cameras that are not provided.
            - You MUST answer IN VIETNAMESE with proper diacritics.

            AVAILABLE CAMERAS:
            {camera_list}

            USER QUESTION:
            "{user_question}"

            MODES:
            1. SINGLE-CAMERA MODE:
               - When the user asks about ONE specific camera or place.
               - Examples:
                 - "Kiểm tra cam phòng khách có người không"
                 - "Ban công có mèo không"
                 - "Cửa mở không"
                 - "Trời mưa không"
               - Describe ONLY what you see from that camera.
               - If dark, blurred, blocked, or offline → say clearly.
               - Keep the answer short and natural for TTS/notification.

            2. MULTI-CAMERA MODE:
               - When the user asks about MANY cameras:
                 - "Camera nào có người"
                 - "Kiểm tra tất cả camera"
                 - "Những camera nào đang offline"
               - In this mode, the script sends MULTIPLE cameras.
               - You MUST produce JSON with:
                 * overview: short description
                 * cameras_with_people: list of cameras with people
                 * cameras_no_people: list without people
                 * cameras_error: dark/offline cameras
                 * summary: one Vietnamese sentence for voice assistant

            DETECTION RULES:
            - "Có người" = any visible human.
            - Detect pets (cat/dog) if user asks.
            - If the question is about pets, focus on them first.
            - Do NOT describe walls/furniture unless relevant.
            - You may mention simple weather (trời sáng/tối/âm u) if visible.

            OUTPUT RULES:
            - Always respond in Vietnamese.
            - If a structure is defined, fill ALL required fields.
            - Do NOT output Markdown or code blocks.
            - Do NOT make up unseen info.
            - Be concise and accurate.

            EDGE CASES:
            - Too dark/blurred: "Khung hình tối hoặc không rõ, không thể khẳng định có người."
            - Offline: put camera in `cameras_error`.
            - One camera but no people: "Không thấy người trong khung hình của <camera_name>."

            SUMMARY FIELD:
            - Must be ≤120 chars in Vietnamese.
            - Example: "Không phát hiện người ở phòng khách, ban công bình thường."

mode: parallel
max_exceeded: silent

variables:
  version: 20251030_final_prompt

fields:
  instructions:
    name: Camera Question
    description: Ask any camera-related question (single or multiple)
    example: "Có ai ở ban công không?"
    selector:
      text:
        multiline: true
    required: true

  camera_entity:
    name: Specific Camera (Optional)
    description: Choose a specific camera or leave blank to auto-detect
    selector:
      entity:
        filter:
          - domain:
              - camera
        multiple: false
    required: false

sequence:
  # 1. Initialize
  - variables:
      ai_task_entity: !input ai_task_entity
      default_camera: !input default_camera
      available_cameras: !input available_cameras
      system_prompt: !input system_prompt
      user_question: "{{ instructions | default('') | trim }}"
      camera_entity_raw: "{{ camera_entity | default('') | trim }}"

  # 2. Validate question
  - if:
      - condition: template
        value_template: "{{ not user_question }}"
    then:
      - variables:
          response:
            error: "Please provide a question about cameras."
      - stop: "Missing question"
        response_variable: response

  # 3. Validate available cameras
  - if:
      - condition: template
        value_template: "{{ available_cameras | length == 0 }}"
    then:
      - variables:
          response:
            error: "No cameras configured in blueprint settings."
      - stop: "No cameras available"
        response_variable: response

  # 4. Build list of available cameras
  - variables:
      camera_list_text: >
        {% set ns = namespace(list=[]) %}
        {% for cam in available_cameras %}
          {% if states[cam] %}
            {% set name = state_attr(cam, 'friendly_name') or cam %}
            {% set ns.list = ns.list + ['- ' ~ name ~ ' (' ~ cam ~ ')'] %}
          {% endif %}
        {% endfor %}
        {{ ns.list | join('\n') }}

  # 5. Determine mode and valid camera
  - variables:
      user_camera_valid: "{{ camera_entity_raw != '' and camera_entity_raw in states }}"
      default_camera_valid: "{{ default_camera != '' and default_camera in states }}"
      final_single_camera: >
        {% if user_camera_valid %}
          {{ camera_entity_raw }}
        {% elif default_camera_valid %}
          {{ default_camera }}
        {% else %}
          {{ (available_cameras | select('in', states) | list)[0] }}
        {% endif %}
      use_single_camera: >
        {% set q = user_question | lower %}
        {% if 'tất cả' in q
              or 'all camera' in q
              or 'camera nào' in q
              or 'những camera' in q
              or 'các camera' in q
              or 'which cameras' in q
              or 'check all' in q %}
          false
        {% else %}
          true
        {% endif %}

  # 6. Prepare attachments
  - variables:
      single_attachment: >
        {
          "media_content_id": "media-source://camera/{{ final_single_camera }}",
          "media_content_type": "application/vnd.apple.mpegurl",
          "metadata": {
            "title": "{{ state_attr(final_single_camera, 'friendly_name') or final_single_camera }}",
            "thumbnail": "/api/camera_proxy/{{ final_single_camera }}",
            "media_class": "video",
            "children_media_class": null,
            "navigateIds": [
              {},
              {
                "media_content_type": "app",
                "media_content_id": "media-source://camera"
              }
            ]
          }
        }

      all_attachments: >
        {% set ns = namespace(items=[]) %}
        {% for cam in available_cameras %}
          {% if states[cam] %}
            {% set name = state_attr(cam, 'friendly_name') or cam %}
            {% set item = {
              'media_content_id': 'media-source://camera/' ~ cam,
              'media_content_type': 'application/vnd.apple.mpegurl',
              'metadata': {
                'title': name,
                'thumbnail': '/api/camera_proxy/' ~ cam,
                'media_class': 'video'
              }
            } %}
            {% set ns.items = ns.items + [item] %}
          {% endif %}
        {% endfor %}
        {{ ns.items }}
      camera_count: "{{ available_cameras | select('in', states) | list | length }}"

  # 7. Build final prompt
  - variables:
      final_prompt: >
        {{ system_prompt
           | replace('{camera_list}', camera_list_text)
           | replace('{user_question}', user_question) }}

  # 8. Call AI Task
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ not ai_task_entity }}"
        sequence:
          - action: ai_task.generate_data
            data:
              task_name: "Smart Camera Analysis"
              instructions: "{{ final_prompt }}"
              attachments: >
                {% if use_single_camera %}
                  {{ [single_attachment | from_json] }}
                {% else %}
                  {{ all_attachments }}
                {% endif %}
              structure:
                overview:
                  description: "Short status of all cameras"
                  required: true
                  selector:
                    text:
                cameras_with_people:
                  description: "List of cameras with people"
                  required: true
                  selector:
                    text:
                cameras_no_people:
                  description: "List of cameras without people"
                  required: true
                  selector:
                    text:
                cameras_error:
                  description: "List of cameras with errors"
                  required: true
                  selector:
                    text:
                summary:
                  description: "One sentence summary in Vietnamese"
                  required: true
                  selector:
                    text:
            response_variable: ai_result

      - conditions:
          - condition: template
            value_template: "{{ ai_task_entity is not none }}"
        sequence:
          - action: ai_task.generate_data
            data:
              entity_id: "{{ ai_task_entity }}"
              task_name: "Smart Camera Analysis"
              instructions: "{{ final_prompt }}"
              attachments: >
                {% if use_single_camera %}
                  {{ [single_attachment | from_json] }}
                {% else %}
                  {{ all_attachments }}
                {% endif %}
              structure:
                overview:
                  description: "Short status of all cameras"
                  required: true
                  selector:
                    text:
                cameras_with_people:
                  description: "List of cameras with people"
                  required: true
                  selector:
                    text:
                cameras_no_people:
                  description: "List of cameras without people"
                  required: true
                  selector:
                    text:
                cameras_error:
                  description: "List of cameras with errors"
                  required: true
                  selector:
                    text:
                summary:
                  description: "One sentence summary in Vietnamese"
                  required: true
                  selector:
                    text:
            response_variable: ai_result

  # 9. Return formatted result
  - variables:
      response:
        mode: "{{ 'single' if use_single_camera else 'multi' }}"
        camera_count: "{{ camera_count }}"
        data: "{{ ai_result.data }}"
  - stop: ""
    response_variable: response
